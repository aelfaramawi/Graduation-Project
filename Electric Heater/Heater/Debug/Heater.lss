
Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00002b6a  00002bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000aa  008000aa  00002c48  2**0
                  ALLOC
  3 .stab         0000495c  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000041a3  00000000  00000000  000075a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b747  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ba36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000da7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000eb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000fb00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ff42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000107d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <main>
      8a:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer0_Init>:
static void (*Timer2_CallBack_Ptr)(void) = NULL_PTR;


/*************  TIMER 0 FUNCTIONS	*************/
void Timer0_Init(Timer_PrescalerType prescaler, uint8 Value, boolean InterruptEnable)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Timer0_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
     cae:	4b 83       	std	Y+3, r20	; 0x03

	#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
	{
		ClearBit(TIMER0_TCCR0_R,TCCR0_WGM01_Bit);
     cb0:	a3 e5       	ldi	r26, 0x53	; 83
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e3 e5       	ldi	r30, 0x53	; 83
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8f 7b       	andi	r24, 0xBF	; 191
     cbc:	8c 93       	st	X, r24
		ClearBit(TIMER0_TCCR0_R,TCCR0_WGM00_Bit);
     cbe:	a3 e5       	ldi	r26, 0x53	; 83
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e3 e5       	ldi	r30, 0x53	; 83
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	87 7f       	andi	r24, 0xF7	; 247
     cca:	8c 93       	st	X, r24

		TIMER0_TCNT0_R = Value;
     ccc:	e2 e5       	ldi	r30, 0x52	; 82
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	80 83       	st	Z, r24
		Timer0_Start(prescaler);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	0e 94 88 06 	call	0xd10	; 0xd10 <Timer0_Start>

		if(InterruptEnable == TRUE)
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	41 f4       	brne	.+16     	; 0xcf0 <Timer0_Init+0x52>
		{
			SetBit(TIMER_TIMSK_R, TIMSK_TOIE0_Bit);
     ce0:	a9 e5       	ldi	r26, 0x59	; 89
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e9 e5       	ldi	r30, 0x59	; 89
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	81 60       	ori	r24, 0x01	; 1
     cec:	8c 93       	st	X, r24
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <Timer0_Init+0x66>
		}
		else if(InterruptEnable == FALSE)
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	88 23       	and	r24, r24
     cf4:	39 f4       	brne	.+14     	; 0xd04 <Timer0_Init+0x66>
		{
			ClearBit(TIMER_TIMSK_R, TIMSK_TOIE0_Bit);
     cf6:	a9 e5       	ldi	r26, 0x59	; 89
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e9 e5       	ldi	r30, 0x59	; 89
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R,TCCR0_WGM00_Bit);
	}
	#else
		#error "You shall define timer operation mode in Timer_Cfg.h"
	#endif
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <Timer0_Start>:

#if( (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)  ||  (TIMER0_OPERATION_MODE == TIMER_MODE_CTC) )
void Timer0_Start(Timer_PrescalerType prescaler)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
	if (prescaler == No_Prescaler)
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	b1 f4       	brne	.+44     	; 0xd4e <Timer0_Start+0x3e>
	{
		SetBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     d22:	a3 e5       	ldi	r26, 0x53	; 83
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e3 e5       	ldi	r30, 0x53	; 83
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	8c 93       	st	X, r24
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     d30:	a3 e5       	ldi	r26, 0x53	; 83
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e3 e5       	ldi	r30, 0x53	; 83
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8d 7f       	andi	r24, 0xFD	; 253
     d3c:	8c 93       	st	X, r24
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     d3e:	a3 e5       	ldi	r26, 0x53	; 83
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e3 e5       	ldi	r30, 0x53	; 83
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8b 7f       	andi	r24, 0xFB	; 251
     d4a:	8c 93       	st	X, r24
     d4c:	95 c0       	rjmp	.+298    	; 0xe78 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_8)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	b1 f4       	brne	.+44     	; 0xd80 <Timer0_Start+0x70>
	{
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     d54:	a3 e5       	ldi	r26, 0x53	; 83
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e3 e5       	ldi	r30, 0x53	; 83
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     d62:	a3 e5       	ldi	r26, 0x53	; 83
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e3 e5       	ldi	r30, 0x53	; 83
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	8c 93       	st	X, r24
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     d70:	a3 e5       	ldi	r26, 0x53	; 83
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e3 e5       	ldi	r30, 0x53	; 83
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8b 7f       	andi	r24, 0xFB	; 251
     d7c:	8c 93       	st	X, r24
     d7e:	7c c0       	rjmp	.+248    	; 0xe78 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_64)
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	83 30       	cpi	r24, 0x03	; 3
     d84:	b1 f4       	brne	.+44     	; 0xdb2 <Timer0_Start+0xa2>
	{
		SetBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     d86:	a3 e5       	ldi	r26, 0x53	; 83
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e3 e5       	ldi	r30, 0x53	; 83
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     d94:	a3 e5       	ldi	r26, 0x53	; 83
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e3 e5       	ldi	r30, 0x53	; 83
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	8c 93       	st	X, r24
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     da2:	a3 e5       	ldi	r26, 0x53	; 83
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e3 e5       	ldi	r30, 0x53	; 83
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	8c 93       	st	X, r24
     db0:	63 c0       	rjmp	.+198    	; 0xe78 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_256)
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	b1 f4       	brne	.+44     	; 0xde4 <Timer0_Start+0xd4>
	{
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     db8:	a3 e5       	ldi	r26, 0x53	; 83
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e3 e5       	ldi	r30, 0x53	; 83
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8e 7f       	andi	r24, 0xFE	; 254
     dc4:	8c 93       	st	X, r24
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     dc6:	a3 e5       	ldi	r26, 0x53	; 83
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e3 e5       	ldi	r30, 0x53	; 83
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8d 7f       	andi	r24, 0xFD	; 253
     dd2:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     dd4:	a3 e5       	ldi	r26, 0x53	; 83
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e3 e5       	ldi	r30, 0x53	; 83
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	84 60       	ori	r24, 0x04	; 4
     de0:	8c 93       	st	X, r24
     de2:	4a c0       	rjmp	.+148    	; 0xe78 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_1024)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	b1 f4       	brne	.+44     	; 0xe16 <Timer0_Start+0x106>
	{
		SetBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     dea:	a3 e5       	ldi	r26, 0x53	; 83
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e3 e5       	ldi	r30, 0x53	; 83
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	81 60       	ori	r24, 0x01	; 1
     df6:	8c 93       	st	X, r24
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     df8:	a3 e5       	ldi	r26, 0x53	; 83
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e3 e5       	ldi	r30, 0x53	; 83
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8d 7f       	andi	r24, 0xFD	; 253
     e04:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     e06:	a3 e5       	ldi	r26, 0x53	; 83
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e3 e5       	ldi	r30, 0x53	; 83
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	84 60       	ori	r24, 0x04	; 4
     e12:	8c 93       	st	X, r24
     e14:	31 c0       	rjmp	.+98     	; 0xe78 <Timer0_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	86 30       	cpi	r24, 0x06	; 6
     e1a:	b1 f4       	brne	.+44     	; 0xe48 <Timer0_Start+0x138>
	{
		ClearBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     e1c:	a3 e5       	ldi	r26, 0x53	; 83
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e3 e5       	ldi	r30, 0x53	; 83
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8e 7f       	andi	r24, 0xFE	; 254
     e28:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     e2a:	a3 e5       	ldi	r26, 0x53	; 83
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e3 e5       	ldi	r30, 0x53	; 83
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     e38:	a3 e5       	ldi	r26, 0x53	; 83
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e3 e5       	ldi	r30, 0x53	; 83
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	8c 93       	st	X, r24
     e46:	18 c0       	rjmp	.+48     	; 0xe78 <Timer0_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	86 30       	cpi	r24, 0x06	; 6
     e4c:	a9 f4       	brne	.+42     	; 0xe78 <Timer0_Start+0x168>
	{
		SetBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     e4e:	a3 e5       	ldi	r26, 0x53	; 83
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e3 e5       	ldi	r30, 0x53	; 83
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     e5c:	a3 e5       	ldi	r26, 0x53	; 83
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e3 e5       	ldi	r30, 0x53	; 83
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	82 60       	ori	r24, 0x02	; 2
     e68:	8c 93       	st	X, r24
		SetBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     e6a:	a3 e5       	ldi	r26, 0x53	; 83
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e3 e5       	ldi	r30, 0x53	; 83
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	84 60       	ori	r24, 0x04	; 4
     e76:	8c 93       	st	X, r24
	}
	else
	{
	}

}
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <Timer0_Stop>:

void Timer0_Stop (void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	ClearBit(TIMER0_TCCR0_R, TCCR0_CS00_Bit);
     e88:	a3 e5       	ldi	r26, 0x53	; 83
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e3 e5       	ldi	r30, 0x53	; 83
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	8c 93       	st	X, r24
	ClearBit(TIMER0_TCCR0_R, TCCR0_CS01_Bit);
     e96:	a3 e5       	ldi	r26, 0x53	; 83
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e3 e5       	ldi	r30, 0x53	; 83
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8d 7f       	andi	r24, 0xFD	; 253
     ea2:	8c 93       	st	X, r24
	ClearBit(TIMER0_TCCR0_R, TCCR0_CS02_Bit);
     ea4:	a3 e5       	ldi	r26, 0x53	; 83
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e3 e5       	ldi	r30, 0x53	; 83
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8b 7f       	andi	r24, 0xFB	; 251
     eb0:	8c 93       	st	X, r24
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <Timer0_SetPreload>:



#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
void Timer0_SetPreload(uint8 preloadValue)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_R = preloadValue;
     ec4:	e2 e5       	ldi	r30, 0x52	; 82
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	80 83       	st	Z, r24
}
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <__vector_11>:

void __vector_11(void)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	static uint16 ovfCounter = 0;
	ovfCounter++;
     efe:	80 91 ae 00 	lds	r24, 0x00AE
     f02:	90 91 af 00 	lds	r25, 0x00AF
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	90 93 af 00 	sts	0x00AF, r25
     f0c:	80 93 ae 00 	sts	0x00AE, r24

	if(Timer0_CallBack_Ptr != NULL_PTR && ovfCounter == TIMER0_FINAL_OVFCOUNT)  /* 100 ms is passed */
     f10:	80 91 aa 00 	lds	r24, 0x00AA
     f14:	90 91 ab 00 	lds	r25, 0x00AB
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	89 f0       	breq	.+34     	; 0xf3e <__vector_11+0x6a>
     f1c:	80 91 ae 00 	lds	r24, 0x00AE
     f20:	90 91 af 00 	lds	r25, 0x00AF
     f24:	28 e1       	ldi	r18, 0x18	; 24
     f26:	8a 36       	cpi	r24, 0x6A	; 106
     f28:	92 07       	cpc	r25, r18
     f2a:	49 f4       	brne	.+18     	; 0xf3e <__vector_11+0x6a>
	{
		(*Timer0_CallBack_Ptr)();
     f2c:	e0 91 aa 00 	lds	r30, 0x00AA
     f30:	f0 91 ab 00 	lds	r31, 0x00AB
     f34:	09 95       	icall
		ovfCounter = 0;
     f36:	10 92 af 00 	sts	0x00AF, r1
     f3a:	10 92 ae 00 	sts	0x00AE, r1
	}
	else
	{}

}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	bf 91       	pop	r27
     f48:	af 91       	pop	r26
     f4a:	9f 91       	pop	r25
     f4c:	8f 91       	pop	r24
     f4e:	7f 91       	pop	r23
     f50:	6f 91       	pop	r22
     f52:	5f 91       	pop	r21
     f54:	4f 91       	pop	r20
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <Timer0_GetPreload>:
}
#endif


uint8 Timer0_GetPreload(void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	return TIMER0_TCNT0_R;
     f6c:	e2 e5       	ldi	r30, 0x52	; 82
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <Timer0_EnableInterrupt>:

void Timer0_EnableInterrupt(void)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
		SetBit(TIMER_TIMSK_R, TIMSK_TOIE0_Bit);
     f80:	a9 e5       	ldi	r26, 0x59	; 89
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e9 e5       	ldi	r30, 0x59	; 89
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	81 60       	ori	r24, 0x01	; 1
     f8c:	8c 93       	st	X, r24
	#elif (TIMER0_OPERATION_MODE == TIMER_MODE_CTC)
		SetBit(TIMER_TIMSK_R, TIMSK_OCIE0_Bit);
	#endif
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <Timer0_DisableInterrupt>:

void Timer0_DisableInterrupt(void)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
		ClearBit(TIMER_TIMSK_R, TIMSK_TOIE0_Bit);
     f9c:	a9 e5       	ldi	r26, 0x59	; 89
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e9 e5       	ldi	r30, 0x59	; 89
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	8c 93       	st	X, r24
	#elif (TIMER0_OPERATION_MODE == TIMER_MODE_CTC)
		ClearBit(TIMER_TIMSK_R, TIMSK_OCIE0_Bit);
	#endif
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <Timer0_SetCallBack>:



void Timer0_SetCallBack ( void(*Ptr2Func)(void) )
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <Timer0_SetCallBack+0x6>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CallBack_Ptr = Ptr2Func;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	90 93 ab 00 	sts	0x00AB, r25
     fc6:	80 93 aa 00 	sts	0x00AA, r24
}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <Timer2_Init>:

/*************  TIMER 2 FUNCTIONS	*************/


void Timer2_Init(Timer_PrescalerType prescaler, uint8 Value, boolean InterruptEnable)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <Timer2_Init+0x6>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	6a 83       	std	Y+2, r22	; 0x02
     fe4:	4b 83       	std	Y+3, r20	; 0x03

	#if (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)
	{
		ClearBit(TIMER2_TCCR2_R,TCCR2_WGM21_Bit);
     fe6:	a5 e4       	ldi	r26, 0x45	; 69
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e4       	ldi	r30, 0x45	; 69
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	87 7f       	andi	r24, 0xF7	; 247
     ff2:	8c 93       	st	X, r24
		ClearBit(TIMER2_TCCR2_R,TCCR2_WGM20_Bit);
     ff4:	a5 e4       	ldi	r26, 0x45	; 69
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e5 e4       	ldi	r30, 0x45	; 69
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8f 7b       	andi	r24, 0xBF	; 191
    1000:	8c 93       	st	X, r24

		TIMER2_TCNT2_R = Value;
    1002:	e4 e4       	ldi	r30, 0x44	; 68
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	80 83       	st	Z, r24
		Timer2_Start(prescaler);
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	0e 94 23 08 	call	0x1046	; 0x1046 <Timer2_Start>

		if(InterruptEnable == TRUE)
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	41 f4       	brne	.+16     	; 0x1026 <Timer2_Init+0x52>
		{
			SetBit(TIMER_TIMSK_R, TIMSK_TOIE2_Bit);
    1016:	a9 e5       	ldi	r26, 0x59	; 89
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e9 e5       	ldi	r30, 0x59	; 89
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	8c 93       	st	X, r24
    1024:	0a c0       	rjmp	.+20     	; 0x103a <Timer2_Init+0x66>
		}
		else if(InterruptEnable == FALSE)
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 23       	and	r24, r24
    102a:	39 f4       	brne	.+14     	; 0x103a <Timer2_Init+0x66>
		{
			ClearBit(TIMER_TIMSK_R, TIMSK_TOIE2_Bit);
    102c:	a9 e5       	ldi	r26, 0x59	; 89
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e9 e5       	ldi	r30, 0x59	; 89
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	8f 7b       	andi	r24, 0xBF	; 191
    1038:	8c 93       	st	X, r24
	#else
		#error "You shall define timer operation mode in Timer_Cfg.h"
	#endif


}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <Timer2_Start>:

#if( (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)  ||  (TIMER2_OPERATION_MODE == TIMER_MODE_CTC) )
void Timer2_Start(Timer_PrescalerType prescaler)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
	if (prescaler == No_Prescaler)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	b1 f4       	brne	.+44     	; 0x1084 <Timer2_Start+0x3e>
	{
		SetBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    1058:	a5 e4       	ldi	r26, 0x45	; 69
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e5 e4       	ldi	r30, 0x45	; 69
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	8c 93       	st	X, r24
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    1066:	a5 e4       	ldi	r26, 0x45	; 69
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e4       	ldi	r30, 0x45	; 69
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8d 7f       	andi	r24, 0xFD	; 253
    1072:	8c 93       	st	X, r24
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    1074:	a5 e4       	ldi	r26, 0x45	; 69
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e4       	ldi	r30, 0x45	; 69
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8b 7f       	andi	r24, 0xFB	; 251
    1080:	8c 93       	st	X, r24
    1082:	95 c0       	rjmp	.+298    	; 0x11ae <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_8)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	b1 f4       	brne	.+44     	; 0x10b6 <Timer2_Start+0x70>
	{
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    108a:	a5 e4       	ldi	r26, 0x45	; 69
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e4       	ldi	r30, 0x45	; 69
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8e 7f       	andi	r24, 0xFE	; 254
    1096:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    1098:	a5 e4       	ldi	r26, 0x45	; 69
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e5 e4       	ldi	r30, 0x45	; 69
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	8c 93       	st	X, r24
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    10a6:	a5 e4       	ldi	r26, 0x45	; 69
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e4       	ldi	r30, 0x45	; 69
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8b 7f       	andi	r24, 0xFB	; 251
    10b2:	8c 93       	st	X, r24
    10b4:	7c c0       	rjmp	.+248    	; 0x11ae <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_64)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	b1 f4       	brne	.+44     	; 0x10e8 <Timer2_Start+0xa2>
	{
		SetBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    10bc:	a5 e4       	ldi	r26, 0x45	; 69
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e4       	ldi	r30, 0x45	; 69
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    10ca:	a5 e4       	ldi	r26, 0x45	; 69
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e4       	ldi	r30, 0x45	; 69
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	82 60       	ori	r24, 0x02	; 2
    10d6:	8c 93       	st	X, r24
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    10d8:	a5 e4       	ldi	r26, 0x45	; 69
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e4       	ldi	r30, 0x45	; 69
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8b 7f       	andi	r24, 0xFB	; 251
    10e4:	8c 93       	st	X, r24
    10e6:	63 c0       	rjmp	.+198    	; 0x11ae <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_256)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	b1 f4       	brne	.+44     	; 0x111a <Timer2_Start+0xd4>
	{
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    10ee:	a5 e4       	ldi	r26, 0x45	; 69
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e4       	ldi	r30, 0x45	; 69
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8e 7f       	andi	r24, 0xFE	; 254
    10fa:	8c 93       	st	X, r24
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    10fc:	a5 e4       	ldi	r26, 0x45	; 69
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e4       	ldi	r30, 0x45	; 69
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8d 7f       	andi	r24, 0xFD	; 253
    1108:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    110a:	a5 e4       	ldi	r26, 0x45	; 69
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e4       	ldi	r30, 0x45	; 69
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	84 60       	ori	r24, 0x04	; 4
    1116:	8c 93       	st	X, r24
    1118:	4a c0       	rjmp	.+148    	; 0x11ae <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_1024)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	85 30       	cpi	r24, 0x05	; 5
    111e:	b1 f4       	brne	.+44     	; 0x114c <Timer2_Start+0x106>
	{
		SetBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    1120:	a5 e4       	ldi	r26, 0x45	; 69
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e4       	ldi	r30, 0x45	; 69
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	81 60       	ori	r24, 0x01	; 1
    112c:	8c 93       	st	X, r24
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    112e:	a5 e4       	ldi	r26, 0x45	; 69
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e5 e4       	ldi	r30, 0x45	; 69
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8d 7f       	andi	r24, 0xFD	; 253
    113a:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    113c:	a5 e4       	ldi	r26, 0x45	; 69
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e4       	ldi	r30, 0x45	; 69
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	84 60       	ori	r24, 0x04	; 4
    1148:	8c 93       	st	X, r24
    114a:	31 c0       	rjmp	.+98     	; 0x11ae <Timer2_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	86 30       	cpi	r24, 0x06	; 6
    1150:	b1 f4       	brne	.+44     	; 0x117e <Timer2_Start+0x138>
	{
		ClearBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    1152:	a5 e4       	ldi	r26, 0x45	; 69
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e4       	ldi	r30, 0x45	; 69
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8e 7f       	andi	r24, 0xFE	; 254
    115e:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    1160:	a5 e4       	ldi	r26, 0x45	; 69
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e4       	ldi	r30, 0x45	; 69
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	82 60       	ori	r24, 0x02	; 2
    116c:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    116e:	a5 e4       	ldi	r26, 0x45	; 69
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e4       	ldi	r30, 0x45	; 69
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	84 60       	ori	r24, 0x04	; 4
    117a:	8c 93       	st	X, r24
    117c:	18 c0       	rjmp	.+48     	; 0x11ae <Timer2_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	86 30       	cpi	r24, 0x06	; 6
    1182:	a9 f4       	brne	.+42     	; 0x11ae <Timer2_Start+0x168>
	{
		SetBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    1184:	a5 e4       	ldi	r26, 0x45	; 69
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e4       	ldi	r30, 0x45	; 69
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    1192:	a5 e4       	ldi	r26, 0x45	; 69
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e5 e4       	ldi	r30, 0x45	; 69
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	82 60       	ori	r24, 0x02	; 2
    119e:	8c 93       	st	X, r24
		SetBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    11a0:	a5 e4       	ldi	r26, 0x45	; 69
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e5 e4       	ldi	r30, 0x45	; 69
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	84 60       	ori	r24, 0x04	; 4
    11ac:	8c 93       	st	X, r24
	}
	else
	{
	}

}
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <Timer2_Stop>:

void Timer2_Stop (void)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	ClearBit(TIMER2_TCCR2_R, TCCR2_CS20_Bit);
    11be:	a5 e4       	ldi	r26, 0x45	; 69
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e4       	ldi	r30, 0x45	; 69
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8e 7f       	andi	r24, 0xFE	; 254
    11ca:	8c 93       	st	X, r24
	ClearBit(TIMER2_TCCR2_R, TCCR2_CS21_Bit);
    11cc:	a5 e4       	ldi	r26, 0x45	; 69
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e5 e4       	ldi	r30, 0x45	; 69
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8d 7f       	andi	r24, 0xFD	; 253
    11d8:	8c 93       	st	X, r24
	ClearBit(TIMER2_TCCR2_R, TCCR2_CS22_Bit);
    11da:	a5 e4       	ldi	r26, 0x45	; 69
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e4       	ldi	r30, 0x45	; 69
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	8c 93       	st	X, r24
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <Timer2_SetPreload>:



#if (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)
void Timer2_SetPreload(uint8 preloadValue)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_TCNT2_R = preloadValue;
    11fa:	e4 e4       	ldi	r30, 0x44	; 68
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	80 83       	st	Z, r24
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <__vector_5>:

void __vector_5(void)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	static uint16 ovfCounter = 0;
	ovfCounter++;
    1234:	80 91 b0 00 	lds	r24, 0x00B0
    1238:	90 91 b1 00 	lds	r25, 0x00B1
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	90 93 b1 00 	sts	0x00B1, r25
    1242:	80 93 b0 00 	sts	0x00B0, r24

	if(Timer2_CallBack_Ptr != NULL_PTR && ovfCounter == TIMER2_FINAL_OVFCOUNT)  /* 1000 ms is passed */
    1246:	80 91 ac 00 	lds	r24, 0x00AC
    124a:	90 91 ad 00 	lds	r25, 0x00AD
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	89 f0       	breq	.+34     	; 0x1274 <__vector_5+0x6a>
    1252:	80 91 b0 00 	lds	r24, 0x00B0
    1256:	90 91 b1 00 	lds	r25, 0x00B1
    125a:	24 ef       	ldi	r18, 0xF4	; 244
    125c:	84 32       	cpi	r24, 0x24	; 36
    125e:	92 07       	cpc	r25, r18
    1260:	49 f4       	brne	.+18     	; 0x1274 <__vector_5+0x6a>
	{
		(*Timer2_CallBack_Ptr)();
    1262:	e0 91 ac 00 	lds	r30, 0x00AC
    1266:	f0 91 ad 00 	lds	r31, 0x00AD
    126a:	09 95       	icall
		ovfCounter = 0;
    126c:	10 92 b1 00 	sts	0x00B1, r1
    1270:	10 92 b0 00 	sts	0x00B0, r1
	}
	else
	{}

}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	ff 91       	pop	r31
    127a:	ef 91       	pop	r30
    127c:	bf 91       	pop	r27
    127e:	af 91       	pop	r26
    1280:	9f 91       	pop	r25
    1282:	8f 91       	pop	r24
    1284:	7f 91       	pop	r23
    1286:	6f 91       	pop	r22
    1288:	5f 91       	pop	r21
    128a:	4f 91       	pop	r20
    128c:	3f 91       	pop	r19
    128e:	2f 91       	pop	r18
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	0f 90       	pop	r0
    1296:	1f 90       	pop	r1
    1298:	18 95       	reti

0000129a <Timer2_GetPreload>:
}
#endif


uint8 Timer2_GetPreload(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	return TIMER2_TCNT2_R;
    12a2:	e4 e4       	ldi	r30, 0x44	; 68
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <Timer2_EnableInterrupt>:

void Timer2_EnableInterrupt(void)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)
		SetBit(TIMER_TIMSK_R, TIMSK_TOIE2_Bit);
    12b6:	a9 e5       	ldi	r26, 0x59	; 89
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e9 e5       	ldi	r30, 0x59	; 89
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 64       	ori	r24, 0x40	; 64
    12c2:	8c 93       	st	X, r24
	#elif (TIMER2_OPERATION_MODE == TIMER_MODE_CTC)
		SetBit(TIMER_TIMSK_R, TIMSK_OCIE2_Bit);
	#endif
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <Timer2_DisableInterrupt>:

void Timer2_DisableInterrupt(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)
		ClearBit(TIMER_TIMSK_R, TIMSK_TOIE2_Bit);
    12d2:	a9 e5       	ldi	r26, 0x59	; 89
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e9 e5       	ldi	r30, 0x59	; 89
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7b       	andi	r24, 0xBF	; 191
    12de:	8c 93       	st	X, r24
	#elif (TIMER2_OPERATION_MODE == TIMER_MODE_CTC)
		ClearBit(TIMER_TIMSK_R, TIMSK_OCIE2_Bit);
	#endif
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <Timer2_SetCallBack>:



void Timer2_SetCallBack ( void(*Ptr2Func)(void) )
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <Timer2_SetCallBack+0x6>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
	Timer2_CallBack_Ptr = Ptr2Func;
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	90 93 ad 00 	sts	0x00AD, r25
    12fc:	80 93 ac 00 	sts	0x00AC, r24
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <GINT_Enable_AllInterrupts>:
 *      Author: elash
 */

#include "GIE_Interface.h"

void GINT_Enable_AllInterrupts(){
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG_R, GINT_I_Bit);
    1312:	af e5       	ldi	r26, 0x5F	; 95
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e5       	ldi	r30, 0x5F	; 95
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	80 68       	ori	r24, 0x80	; 128
    131e:	8c 93       	st	X, r24
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <GINT_Disable_AllInterrupts>:
void GINT_Disable_AllInterrupts(){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	ClearBit(SREG_R, GINT_I_Bit);
    132e:	af e5       	ldi	r26, 0x5F	; 95
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ef e5       	ldi	r30, 0x5F	; 95
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8f 77       	andi	r24, 0x7F	; 127
    133a:	8c 93       	st	X, r24
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <Ext_INT_Enable>:

static void (*ExtINT_CallBack_Ptr)(void) = NULL_PTR;


void Ext_INT_Enable(ExtINT_Type INTId)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <Ext_INT_Enable+0x6>
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
	switch(INTId)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3b 83       	std	Y+3, r19	; 0x03
    1358:	2a 83       	std	Y+2, r18	; 0x02
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	89 f0       	breq	.+34     	; 0x1386 <Ext_INT_Enable+0x44>
    1364:	2a 81       	ldd	r18, Y+2	; 0x02
    1366:	3b 81       	ldd	r19, Y+3	; 0x03
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	a1 f0       	breq	.+40     	; 0x1396 <Ext_INT_Enable+0x54>
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	b1 f4       	brne	.+44     	; 0x13a2 <Ext_INT_Enable+0x60>
	{
		case Ext_INT0:
		SetBit(GICR_R, GICR_INT0_Bit);
    1376:	ab e5       	ldi	r26, 0x5B	; 91
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	eb e5       	ldi	r30, 0x5B	; 91
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	8c 93       	st	X, r24
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <Ext_INT_Enable+0x60>
		break;

		case Ext_INT1:
		SetBit(GICR_R, GICR_INT1_Bit);
    1386:	ab e5       	ldi	r26, 0x5B	; 91
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e5       	ldi	r30, 0x5B	; 91
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	8c 93       	st	X, r24
    1394:	06 c0       	rjmp	.+12     	; 0x13a2 <Ext_INT_Enable+0x60>
		break;

		case Ext_INT2:
		SetBit(GICR_R, GICR_INT2_Bit);
    1396:	eb e5       	ldi	r30, 0x5B	; 91
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ab e5       	ldi	r26, 0x5B	; 91
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	8c 91       	ld	r24, X
    13a0:	80 83       	st	Z, r24
		break;
	}
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <Ext_INT_Disable>:
void Ext_INT_Disable(ExtINT_Type INTId)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Ext_INT_Disable+0x6>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	89 83       	std	Y+1, r24	; 0x01
		switch(INTId)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3b 83       	std	Y+3, r19	; 0x03
    13c4:	2a 83       	std	Y+2, r18	; 0x02
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	91 05       	cpc	r25, r1
    13ce:	89 f0       	breq	.+34     	; 0x13f2 <Ext_INT_Disable+0x44>
    13d0:	2a 81       	ldd	r18, Y+2	; 0x02
    13d2:	3b 81       	ldd	r19, Y+3	; 0x03
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	a1 f0       	breq	.+40     	; 0x1402 <Ext_INT_Disable+0x54>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	9b 81       	ldd	r25, Y+3	; 0x03
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	b1 f4       	brne	.+44     	; 0x140e <Ext_INT_Disable+0x60>
		{
			case Ext_INT0:
			ClearBit(GICR_R, GICR_INT0_Bit);
    13e2:	ab e5       	ldi	r26, 0x5B	; 91
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e5       	ldi	r30, 0x5B	; 91
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	8c 93       	st	X, r24
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <Ext_INT_Disable+0x60>
			break;

			case Ext_INT1:
			ClearBit(GICR_R, GICR_INT1_Bit);
    13f2:	ab e5       	ldi	r26, 0x5B	; 91
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	eb e5       	ldi	r30, 0x5B	; 91
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 77       	andi	r24, 0x7F	; 127
    13fe:	8c 93       	st	X, r24
    1400:	06 c0       	rjmp	.+12     	; 0x140e <Ext_INT_Disable+0x60>
			break;

			case Ext_INT2:
			ClearBit(GICR_R, GICR_INT2_Bit);
    1402:	eb e5       	ldi	r30, 0x5B	; 91
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	ab e5       	ldi	r26, 0x5B	; 91
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	8c 91       	ld	r24, X
    140c:	80 83       	st	Z, r24
			break;
		}
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <Ext_INT_SnControl>:
void Ext_INT_SnControl(ExtINT_Type INTId, ExtISC_Type mode)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <Ext_INT_SnControl+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <Ext_INT_SnControl+0x8>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	6a 83       	std	Y+2, r22	; 0x02
		switch(INTId)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	2b 83       	std	Y+3, r18	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	91 f0       	breq	.+36     	; 0x1462 <Ext_INT_SnControl+0x48>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	e9 f0       	breq	.+58     	; 0x1482 <Ext_INT_SnControl+0x68>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	71 f5       	brne	.+92     	; 0x14ac <Ext_INT_SnControl+0x92>
		{
			case Ext_INT0:
			MCUCR_R |= (mode<<0);
    1450:	a5 e5       	ldi	r26, 0x55	; 85
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e5       	ldi	r30, 0x55	; 85
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	90 81       	ld	r25, Z
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	89 2b       	or	r24, r25
    145e:	8c 93       	st	X, r24
    1460:	25 c0       	rjmp	.+74     	; 0x14ac <Ext_INT_SnControl+0x92>
			break;

			case Ext_INT1:
			MCUCR_R |= (mode<<2);
    1462:	a5 e5       	ldi	r26, 0x55	; 85
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e5       	ldi	r30, 0x55	; 85
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	82 2b       	or	r24, r18
    147e:	8c 93       	st	X, r24
    1480:	15 c0       	rjmp	.+42     	; 0x14ac <Ext_INT_SnControl+0x92>
			break;

			case Ext_INT2:
			if (mode == Falling_Edge)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	41 f4       	brne	.+16     	; 0x1498 <Ext_INT_SnControl+0x7e>
			{
				ClearBit(MCUCSR_R, MCUCSR_INT2_ISC2_Bit);
    1488:	a4 e5       	ldi	r26, 0x54	; 84
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e4 e5       	ldi	r30, 0x54	; 84
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 7b       	andi	r24, 0xBF	; 191
    1494:	8c 93       	st	X, r24
    1496:	0a c0       	rjmp	.+20     	; 0x14ac <Ext_INT_SnControl+0x92>
			}
			else if(mode == Rising_Edge)
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	39 f4       	brne	.+14     	; 0x14ac <Ext_INT_SnControl+0x92>
			{
				SetBit(MCUCSR_R, MCUCSR_INT2_ISC2_Bit);
    149e:	a4 e5       	ldi	r26, 0x54	; 84
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e5       	ldi	r30, 0x54	; 84
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 64       	ori	r24, 0x40	; 64
    14aa:	8c 93       	st	X, r24

			}
			break;
		}

}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <Ext_INT_SetCallBack>:

void Ext_INT_SetCallBack ( void(*Ptr2Func)(void) )
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <Ext_INT_SetCallBack+0x6>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	ExtINT_CallBack_Ptr = Ptr2Func;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	90 93 b3 00 	sts	0x00B3, r25
    14d0:	80 93 b2 00 	sts	0x00B2, r24
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <__vector_1>:



void __vector_1(void)
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
	(*ExtINT_CallBack_Ptr)();
    1508:	e0 91 b2 00 	lds	r30, 0x00B2
    150c:	f0 91 b3 00 	lds	r31, 0x00B3
    1510:	09 95       	icall

}
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	ff 91       	pop	r31
    1518:	ef 91       	pop	r30
    151a:	bf 91       	pop	r27
    151c:	af 91       	pop	r26
    151e:	9f 91       	pop	r25
    1520:	8f 91       	pop	r24
    1522:	7f 91       	pop	r23
    1524:	6f 91       	pop	r22
    1526:	5f 91       	pop	r21
    1528:	4f 91       	pop	r20
    152a:	3f 91       	pop	r19
    152c:	2f 91       	pop	r18
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <EEPROM_write>:
 */

#include "EEPROM_Interface.h"

void EEPROM_write(uint16 uiAddress, uint8 ucData)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <EEPROM_write+0x6>
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(EECR_R & (1<<EEWE_Bit))
    154a:	ec e3       	ldi	r30, 0x3C	; 60
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	82 70       	andi	r24, 0x02	; 2
    1556:	90 70       	andi	r25, 0x00	; 0
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	b9 f7       	brne	.-18     	; 0x154a <EEPROM_write+0x12>
	;
	/* Set up address and data registers */
	EEARL_R = uiAddress;
    155c:	ef e3       	ldi	r30, 0x3F	; 63
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	80 83       	st	Z, r24
	EEARH_R = uiAddress>>8;
    1564:	ee e3       	ldi	r30, 0x3E	; 62
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	89 2f       	mov	r24, r25
    156e:	99 27       	eor	r25, r25
    1570:	80 83       	st	Z, r24
	EEDR_R = ucData;
    1572:	ed e3       	ldi	r30, 0x3D	; 61
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EECR_R |= (1<<EEMWE_Bit);
    157a:	ac e3       	ldi	r26, 0x3C	; 60
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ec e3       	ldi	r30, 0x3C	; 60
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	84 60       	ori	r24, 0x04	; 4
    1586:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	EECR_R |= (1<<EEWE_Bit);
    1588:	ac e3       	ldi	r26, 0x3C	; 60
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ec e3       	ldi	r30, 0x3C	; 60
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	82 60       	ori	r24, 0x02	; 2
    1594:	8c 93       	st	X, r24
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <EEPROM_read>:


uint8 EEPROM_read(uint16 uiAddress)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <EEPROM_read+0x6>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(EECR_R & (1<<EEWE_Bit))
    15b0:	ec e3       	ldi	r30, 0x3C	; 60
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	82 70       	andi	r24, 0x02	; 2
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	b9 f7       	brne	.-18     	; 0x15b0 <EEPROM_read+0xe>
	;
	/* Set up address register */
	EEARL_R = uiAddress;
    15c2:	ef e3       	ldi	r30, 0x3F	; 63
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	80 83       	st	Z, r24
	EEARH_R = uiAddress>>8;
    15ca:	ee e3       	ldi	r30, 0x3E	; 62
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	89 2f       	mov	r24, r25
    15d4:	99 27       	eor	r25, r25
    15d6:	80 83       	st	Z, r24
	/* Start eeprom read by writing EERE */
	EECR_R |= (1<<EERE_Bit);
    15d8:	ac e3       	ldi	r26, 0x3C	; 60
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ec e3       	ldi	r30, 0x3C	; 60
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	81 60       	ori	r24, 0x01	; 1
    15e4:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR_R;
    15e6:	ed e3       	ldi	r30, 0x3D	; 61
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <DIO_Init>:
	{Input, STD_Low}

};


void DIO_Init (void) {
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <DIO_Init+0x6>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <DIO_Init+0x8>
    15fe:	0f 92       	push	r0
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62

	DIO_ChannelType count = DIO_ChannelA0;
    1604:	1b 82       	std	Y+3, r1	; 0x03
	DIO_PortType Portx;
	DIO_ChannelType BitNo;

	for(count = DIO_ChannelA0 ; count<PINCOUNT ; count++)
    1606:	1b 82       	std	Y+3, r1	; 0x03
    1608:	fc c0       	rjmp	.+504    	; 0x1802 <DIO_Init+0x20c>
	{
		Portx = count/8;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	86 95       	lsr	r24
    160e:	86 95       	lsr	r24
    1610:	86 95       	lsr	r24
    1612:	8a 83       	std	Y+2, r24	; 0x02
		BitNo = count%8;
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	87 70       	andi	r24, 0x07	; 7
    1618:	89 83       	std	Y+1, r24	; 0x01
		switch(Portx){
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3d 83       	std	Y+5, r19	; 0x05
    1622:	2c 83       	std	Y+4, r18	; 0x04
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	9d 81       	ldd	r25, Y+5	; 0x05
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <DIO_Init+0x3a>
    162e:	4b c0       	rjmp	.+150    	; 0x16c6 <DIO_Init+0xd0>
    1630:	2c 81       	ldd	r18, Y+4	; 0x04
    1632:	3d 81       	ldd	r19, Y+5	; 0x05
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <DIO_Init+0x4e>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	71 f0       	breq	.+28     	; 0x165e <DIO_Init+0x68>
    1642:	dc c0       	rjmp	.+440    	; 0x17fc <DIO_Init+0x206>
    1644:	2c 81       	ldd	r18, Y+4	; 0x04
    1646:	3d 81       	ldd	r19, Y+5	; 0x05
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <DIO_Init+0x5a>
    164e:	6f c0       	rjmp	.+222    	; 0x172e <DIO_Init+0x138>
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	9d 81       	ldd	r25, Y+5	; 0x05
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	91 05       	cpc	r25, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <DIO_Init+0x66>
    165a:	9d c0       	rjmp	.+314    	; 0x1796 <DIO_Init+0x1a0>
    165c:	cf c0       	rjmp	.+414    	; 0x17fc <DIO_Init+0x206>
			case DIO_PortA:
			if (PinCfg[count].PinDir == Output)
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	fc 01       	movw	r30, r24
    166a:	e8 59       	subi	r30, 0x98	; 152
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	a1 f4       	brne	.+40     	; 0x169c <DIO_Init+0xa6>
			{
				SetBit(DDRA_R,BitNo);
    1674:	aa e3       	ldi	r26, 0x3A	; 58
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	ea e3       	ldi	r30, 0x3A	; 58
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_Init+0x9c>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_Init+0x98>
    1696:	84 2b       	or	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	b0 c0       	rjmp	.+352    	; 0x17fc <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRA_R,BitNo);
    169c:	aa e3       	ldi	r26, 0x3A	; 58
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ea e3       	ldi	r30, 0x3A	; 58
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_Init+0xc4>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_Init+0xc0>
    16be:	80 95       	com	r24
    16c0:	84 23       	and	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	9b c0       	rjmp	.+310    	; 0x17fc <DIO_Init+0x206>
			}
			break;

			case DIO_PortB:
			if (PinCfg[count].PinDir == Output)
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	fc 01       	movw	r30, r24
    16d2:	e8 59       	subi	r30, 0x98	; 152
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	a1 f4       	brne	.+40     	; 0x1704 <DIO_Init+0x10e>
			{
				SetBit(DDRB_R,BitNo);
    16dc:	a7 e3       	ldi	r26, 0x37	; 55
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e3       	ldi	r30, 0x37	; 55
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_Init+0x104>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_Init+0x100>
    16fe:	84 2b       	or	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	7c c0       	rjmp	.+248    	; 0x17fc <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRB_R,BitNo);
    1704:	a7 e3       	ldi	r26, 0x37	; 55
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e7 e3       	ldi	r30, 0x37	; 55
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_Init+0x12c>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_Init+0x128>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	67 c0       	rjmp	.+206    	; 0x17fc <DIO_Init+0x206>
			}
			break;

			case DIO_PortC:
			if (PinCfg[count].PinDir == Output)
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	fc 01       	movw	r30, r24
    173a:	e8 59       	subi	r30, 0x98	; 152
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	a1 f4       	brne	.+40     	; 0x176c <DIO_Init+0x176>
			{
				SetBit(DDRC_R,BitNo);
    1744:	a4 e3       	ldi	r26, 0x34	; 52
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e4 e3       	ldi	r30, 0x34	; 52
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_Init+0x16c>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_Init+0x168>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	48 c0       	rjmp	.+144    	; 0x17fc <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRC_R,BitNo);
    176c:	a4 e3       	ldi	r26, 0x34	; 52
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e4 e3       	ldi	r30, 0x34	; 52
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_Init+0x194>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_Init+0x190>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	33 c0       	rjmp	.+102    	; 0x17fc <DIO_Init+0x206>
			}
			break;

			case DIO_PortD:
			if (PinCfg[count].PinDir == Output)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	fc 01       	movw	r30, r24
    17a2:	e8 59       	subi	r30, 0x98	; 152
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	a1 f4       	brne	.+40     	; 0x17d4 <DIO_Init+0x1de>
			{
				SetBit(DDRD_R,BitNo);
    17ac:	a1 e3       	ldi	r26, 0x31	; 49
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_Init+0x1d4>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_Init+0x1d0>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRD_R,BitNo);
    17d4:	a1 e3       	ldi	r26, 0x31	; 49
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e1 e3       	ldi	r30, 0x31	; 49
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_Init+0x1fc>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_Init+0x1f8>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24

	DIO_ChannelType count = DIO_ChannelA0;
	DIO_PortType Portx;
	DIO_ChannelType BitNo;

	for(count = DIO_ChannelA0 ; count<PINCOUNT ; count++)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	8b 83       	std	Y+3, r24	; 0x03
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	80 32       	cpi	r24, 0x20	; 32
    1806:	08 f4       	brcc	.+2      	; 0x180a <DIO_Init+0x214>
    1808:	00 cf       	rjmp	.-512    	; 0x160a <DIO_Init+0x14>
		}

	}


}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <DIO_WriteChannel>:
#include "DIO_Interface.h"



void DIO_WriteChannel (DIO_ChannelType ChannelId, STD_LevelType Level)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <DIO_WriteChannel+0x6>
    1820:	00 d0       	rcall	.+0      	; 0x1822 <DIO_WriteChannel+0x8>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <DIO_WriteChannel+0xa>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	8b 83       	std	Y+3, r24	; 0x03
    182a:	6c 83       	std	Y+4, r22	; 0x04
	DIO_PortType Portx = ChannelId/8;
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	86 95       	lsr	r24
    1830:	86 95       	lsr	r24
    1832:	86 95       	lsr	r24
    1834:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelType BitNo = ChannelId%8;
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	87 70       	andi	r24, 0x07	; 7
    183a:	89 83       	std	Y+1, r24	; 0x01

	switch (Portx)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3e 83       	std	Y+6, r19	; 0x06
    1844:	2d 83       	std	Y+5, r18	; 0x05
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <DIO_WriteChannel+0x38>
    1850:	43 c0       	rjmp	.+134    	; 0x18d8 <DIO_WriteChannel+0xbe>
    1852:	2d 81       	ldd	r18, Y+5	; 0x05
    1854:	3e 81       	ldd	r19, Y+6	; 0x06
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <DIO_WriteChannel+0x4c>
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	71 f0       	breq	.+28     	; 0x1880 <DIO_WriteChannel+0x66>
    1864:	bc c0       	rjmp	.+376    	; 0x19de <DIO_WriteChannel+0x1c4>
    1866:	2d 81       	ldd	r18, Y+5	; 0x05
    1868:	3e 81       	ldd	r19, Y+6	; 0x06
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <DIO_WriteChannel+0x58>
    1870:	5f c0       	rjmp	.+190    	; 0x1930 <DIO_WriteChannel+0x116>
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <DIO_WriteChannel+0x64>
    187c:	85 c0       	rjmp	.+266    	; 0x1988 <DIO_WriteChannel+0x16e>
    187e:	af c0       	rjmp	.+350    	; 0x19de <DIO_WriteChannel+0x1c4>
	{
		case DIO_PortA:
		if (Level == STD_High)
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	a1 f4       	brne	.+40     	; 0x18ae <DIO_WriteChannel+0x94>
		{
			SetBit(PORTA_R,BitNo);
    1886:	ab e3       	ldi	r26, 0x3B	; 59
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	eb e3       	ldi	r30, 0x3B	; 59
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_WriteChannel+0x8a>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_WriteChannel+0x86>
    18a8:	84 2b       	or	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	98 c0       	rjmp	.+304    	; 0x19de <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTA_R,BitNo);
    18ae:	ab e3       	ldi	r26, 0x3B	; 59
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	eb e3       	ldi	r30, 0x3B	; 59
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_WriteChannel+0xb2>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_WriteChannel+0xae>
    18d0:	80 95       	com	r24
    18d2:	84 23       	and	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	83 c0       	rjmp	.+262    	; 0x19de <DIO_WriteChannel+0x1c4>
		}
		break;

		case DIO_PortB:
		if (Level == STD_High)
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	a1 f4       	brne	.+40     	; 0x1906 <DIO_WriteChannel+0xec>
		{
			SetBit(PORTB_R,BitNo);
    18de:	a8 e3       	ldi	r26, 0x38	; 56
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_WriteChannel+0xe2>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_WriteChannel+0xde>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	6c c0       	rjmp	.+216    	; 0x19de <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTB_R,BitNo);
    1906:	a8 e3       	ldi	r26, 0x38	; 56
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e8 e3       	ldi	r30, 0x38	; 56
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_WriteChannel+0x10a>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_WriteChannel+0x106>
    1928:	80 95       	com	r24
    192a:	84 23       	and	r24, r20
    192c:	8c 93       	st	X, r24
    192e:	57 c0       	rjmp	.+174    	; 0x19de <DIO_WriteChannel+0x1c4>
		}
		break;

		case DIO_PortC:
		if (Level == STD_High)
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	a1 f4       	brne	.+40     	; 0x195e <DIO_WriteChannel+0x144>
		{
			SetBit(PORTC_R,BitNo);
    1936:	a5 e3       	ldi	r26, 0x35	; 53
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e5 e3       	ldi	r30, 0x35	; 53
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_WriteChannel+0x13a>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_WriteChannel+0x136>
    1958:	84 2b       	or	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	40 c0       	rjmp	.+128    	; 0x19de <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTC_R,BitNo);
    195e:	a5 e3       	ldi	r26, 0x35	; 53
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 e3       	ldi	r30, 0x35	; 53
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_WriteChannel+0x162>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <DIO_WriteChannel+0x15e>
    1980:	80 95       	com	r24
    1982:	84 23       	and	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	2b c0       	rjmp	.+86     	; 0x19de <DIO_WriteChannel+0x1c4>
		}
		break;

		case DIO_PortD:
		if (Level == STD_High)
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	a1 f4       	brne	.+40     	; 0x19b6 <DIO_WriteChannel+0x19c>
		{
			SetBit(PORTD_R,BitNo);
    198e:	a2 e3       	ldi	r26, 0x32	; 50
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e2 e3       	ldi	r30, 0x32	; 50
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <DIO_WriteChannel+0x192>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <DIO_WriteChannel+0x18e>
    19b0:	84 2b       	or	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTD_R,BitNo);
    19b6:	a2 e3       	ldi	r26, 0x32	; 50
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e2 e3       	ldi	r30, 0x32	; 50
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <DIO_WriteChannel+0x1ba>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <DIO_WriteChannel+0x1b6>
    19d8:	80 95       	com	r24
    19da:	84 23       	and	r24, r20
    19dc:	8c 93       	st	X, r24
		}
		break;
	}


}
    19de:	26 96       	adiw	r28, 0x06	; 6
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <DIO_ReadChannel>:
STD_LevelType DIO_ReadChannel (DIO_ChannelType ChannelId)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <DIO_ReadChannel+0x6>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_ReadChannel+0x8>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_ReadChannel+0xa>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	8c 83       	std	Y+4, r24	; 0x04
		DIO_PortType Portx = ChannelId/8;
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	86 95       	lsr	r24
    1a04:	86 95       	lsr	r24
    1a06:	86 95       	lsr	r24
    1a08:	8b 83       	std	Y+3, r24	; 0x03
		DIO_ChannelType BitNo = ChannelId%8;
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	87 70       	andi	r24, 0x07	; 7
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
		STD_LevelType BitValue = STD_Low;
    1a10:	19 82       	std	Y+1, r1	; 0x01

		switch(Portx){
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	3e 83       	std	Y+6, r19	; 0x06
    1a1a:	2d 83       	std	Y+5, r18	; 0x05
    1a1c:	4d 81       	ldd	r20, Y+5	; 0x05
    1a1e:	5e 81       	ldd	r21, Y+6	; 0x06
    1a20:	41 30       	cpi	r20, 0x01	; 1
    1a22:	51 05       	cpc	r21, r1
    1a24:	41 f1       	breq	.+80     	; 0x1a76 <DIO_ReadChannel+0x86>
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	82 30       	cpi	r24, 0x02	; 2
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	34 f4       	brge	.+12     	; 0x1a3c <DIO_ReadChannel+0x4c>
    1a30:	2d 81       	ldd	r18, Y+5	; 0x05
    1a32:	3e 81       	ldd	r19, Y+6	; 0x06
    1a34:	21 15       	cp	r18, r1
    1a36:	31 05       	cpc	r19, r1
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <DIO_ReadChannel+0x62>
    1a3a:	52 c0       	rjmp	.+164    	; 0x1ae0 <DIO_ReadChannel+0xf0>
    1a3c:	4d 81       	ldd	r20, Y+5	; 0x05
    1a3e:	5e 81       	ldd	r21, Y+6	; 0x06
    1a40:	42 30       	cpi	r20, 0x02	; 2
    1a42:	51 05       	cpc	r21, r1
    1a44:	51 f1       	breq	.+84     	; 0x1a9a <DIO_ReadChannel+0xaa>
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	b9 f1       	breq	.+110    	; 0x1abe <DIO_ReadChannel+0xce>
    1a50:	47 c0       	rjmp	.+142    	; 0x1ae0 <DIO_ReadChannel+0xf0>
			case DIO_PortA:
			BitValue = GetBit(PINA_R,BitNo);
    1a52:	e9 e3       	ldi	r30, 0x39	; 57
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a9 01       	movw	r20, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_ReadChannel+0x7a>
    1a66:	55 95       	asr	r21
    1a68:	47 95       	ror	r20
    1a6a:	8a 95       	dec	r24
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_ReadChannel+0x76>
    1a6e:	ca 01       	movw	r24, r20
    1a70:	81 70       	andi	r24, 0x01	; 1
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	35 c0       	rjmp	.+106    	; 0x1ae0 <DIO_ReadChannel+0xf0>
			break;
			case DIO_PortB:
			BitValue = GetBit(PINB_R,BitNo);
    1a76:	e6 e3       	ldi	r30, 0x36	; 54
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a9 01       	movw	r20, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_ReadChannel+0x9e>
    1a8a:	55 95       	asr	r21
    1a8c:	47 95       	ror	r20
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_ReadChannel+0x9a>
    1a92:	ca 01       	movw	r24, r20
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	23 c0       	rjmp	.+70     	; 0x1ae0 <DIO_ReadChannel+0xf0>
			break;
			case DIO_PortC:
			BitValue = GetBit(PINC_R,BitNo);
    1a9a:	e3 e3       	ldi	r30, 0x33	; 51
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <DIO_ReadChannel+0xc2>
    1aae:	55 95       	asr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	8a 95       	dec	r24
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <DIO_ReadChannel+0xbe>
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	81 70       	andi	r24, 0x01	; 1
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	11 c0       	rjmp	.+34     	; 0x1ae0 <DIO_ReadChannel+0xf0>
			break;
			case DIO_PortD:
			BitValue = GetBit(PIND_R,BitNo);
    1abe:	e0 e3       	ldi	r30, 0x30	; 48
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a9 01       	movw	r20, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_ReadChannel+0xe6>
    1ad2:	55 95       	asr	r21
    1ad4:	47 95       	ror	r20
    1ad6:	8a 95       	dec	r24
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_ReadChannel+0xe2>
    1ada:	ca 01       	movw	r24, r20
    1adc:	81 70       	andi	r24, 0x01	; 1
    1ade:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return BitValue;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01


}
    1ae2:	26 96       	adiw	r28, 0x06	; 6
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <DIO_ToggleChannel>:

void DIO_ToggleChannel (DIO_ChannelType ChannelId)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <DIO_ToggleChannel+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <DIO_ToggleChannel+0x8>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	8b 83       	std	Y+3, r24	; 0x03
	DIO_PortType Portx = ChannelId/8;
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	86 95       	lsr	r24
    1b08:	86 95       	lsr	r24
    1b0a:	86 95       	lsr	r24
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelType BitNo = ChannelId%8;
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	87 70       	andi	r24, 0x07	; 7
    1b12:	89 83       	std	Y+1, r24	; 0x01

	switch (Portx)
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	3d 83       	std	Y+5, r19	; 0x05
    1b1c:	2c 83       	std	Y+4, r18	; 0x04
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	9d 81       	ldd	r25, Y+5	; 0x05
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	91 05       	cpc	r25, r1
    1b26:	49 f1       	breq	.+82     	; 0x1b7a <DIO_ToggleChannel+0x86>
    1b28:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <DIO_ToggleChannel+0x48>
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	9d 81       	ldd	r25, Y+5	; 0x05
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	61 f0       	breq	.+24     	; 0x1b52 <DIO_ToggleChannel+0x5e>
    1b3a:	5a c0       	rjmp	.+180    	; 0x1bf0 <DIO_ToggleChannel+0xfc>
    1b3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	71 f1       	breq	.+92     	; 0x1ba2 <DIO_ToggleChannel+0xae>
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	e9 f1       	breq	.+122    	; 0x1bca <DIO_ToggleChannel+0xd6>
    1b50:	4f c0       	rjmp	.+158    	; 0x1bf0 <DIO_ToggleChannel+0xfc>
	{
		case DIO_PortA:
		ToggleBit(PORTA_R,BitNo);
    1b52:	ab e3       	ldi	r26, 0x3B	; 59
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	eb e3       	ldi	r30, 0x3B	; 59
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_ToggleChannel+0x7c>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <DIO_ToggleChannel+0x78>
    1b74:	84 27       	eor	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	3b c0       	rjmp	.+118    	; 0x1bf0 <DIO_ToggleChannel+0xfc>
		break;

		case DIO_PortB:
		ToggleBit(PORTB_R,BitNo);
    1b7a:	a8 e3       	ldi	r26, 0x38	; 56
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e8 e3       	ldi	r30, 0x38	; 56
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_ToggleChannel+0xa4>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_ToggleChannel+0xa0>
    1b9c:	84 27       	eor	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	27 c0       	rjmp	.+78     	; 0x1bf0 <DIO_ToggleChannel+0xfc>
		break;

		case DIO_PortC:
		ToggleBit(PORTC_R,BitNo);
    1ba2:	a5 e3       	ldi	r26, 0x35	; 53
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e5 e3       	ldi	r30, 0x35	; 53
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_ToggleChannel+0xcc>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_ToggleChannel+0xc8>
    1bc4:	84 27       	eor	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	13 c0       	rjmp	.+38     	; 0x1bf0 <DIO_ToggleChannel+0xfc>
		break;

		case DIO_PortD:
		ToggleBit(PORTD_R,BitNo);
    1bca:	a2 e3       	ldi	r26, 0x32	; 50
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e2 e3       	ldi	r30, 0x32	; 50
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_ToggleChannel+0xf4>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_ToggleChannel+0xf0>
    1bec:	84 27       	eor	r24, r20
    1bee:	8c 93       	st	X, r24
		break;
	}


}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <DIO_ReadPort>:


uint8 DIO_ReadPort (DIO_PortType PortId)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <DIO_ReadPort+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <DIO_ReadPort+0x8>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Data=0;
    1c0e:	19 82       	std	Y+1, r1	; 0x01

	switch(PortId)
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	3c 83       	std	Y+4, r19	; 0x04
    1c18:	2b 83       	std	Y+3, r18	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	91 05       	cpc	r25, r1
    1c22:	d1 f0       	breq	.+52     	; 0x1c58 <DIO_ReadPort+0x58>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <DIO_ReadPort+0x38>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	61 f0       	breq	.+24     	; 0x1c4e <DIO_ReadPort+0x4e>
    1c36:	1e c0       	rjmp	.+60     	; 0x1c74 <DIO_ReadPort+0x74>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	81 f0       	breq	.+32     	; 0x1c62 <DIO_ReadPort+0x62>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	83 30       	cpi	r24, 0x03	; 3
    1c48:	91 05       	cpc	r25, r1
    1c4a:	81 f0       	breq	.+32     	; 0x1c6c <DIO_ReadPort+0x6c>
    1c4c:	13 c0       	rjmp	.+38     	; 0x1c74 <DIO_ReadPort+0x74>
	{
		case DIO_PortA:
		Data = PORTA_R;
    1c4e:	eb e3       	ldi	r30, 0x3B	; 59
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	0e c0       	rjmp	.+28     	; 0x1c74 <DIO_ReadPort+0x74>
		break;

		case DIO_PortB:
		Data = PORTB_R;
    1c58:	e8 e3       	ldi	r30, 0x38	; 56
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	09 c0       	rjmp	.+18     	; 0x1c74 <DIO_ReadPort+0x74>
		break;

		case DIO_PortC:
		Data = PORTC_R;
    1c62:	e5 e3       	ldi	r30, 0x35	; 53
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <DIO_ReadPort+0x74>
		break;

		case DIO_PortD:
		Data = PORTD_R;
    1c6c:	e2 e3       	ldi	r30, 0x32	; 50
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Data;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <DIO_WritePort>:


void DIO_WritePort (DIO_PortType PortId, uint8 PortValue)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <DIO_WritePort+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_WritePort+0x8>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	6a 83       	std	Y+2, r22	; 0x02

	switch(PortId)
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	3c 83       	std	Y+4, r19	; 0x04
    1c9c:	2b 83       	std	Y+3, r18	; 0x03
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	d1 f0       	breq	.+52     	; 0x1cdc <DIO_WritePort+0x58>
    1ca8:	2b 81       	ldd	r18, Y+3	; 0x03
    1caa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <DIO_WritePort+0x38>
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	61 f0       	breq	.+24     	; 0x1cd2 <DIO_WritePort+0x4e>
    1cba:	1e c0       	rjmp	.+60     	; 0x1cf8 <DIO_WritePort+0x74>
    1cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	81 f0       	breq	.+32     	; 0x1ce6 <DIO_WritePort+0x62>
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <DIO_WritePort+0x6c>
    1cd0:	13 c0       	rjmp	.+38     	; 0x1cf8 <DIO_WritePort+0x74>
	{
		case DIO_PortA:
		PORTA_R = PortValue;
    1cd2:	eb e3       	ldi	r30, 0x3B	; 59
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	80 83       	st	Z, r24
    1cda:	0e c0       	rjmp	.+28     	; 0x1cf8 <DIO_WritePort+0x74>
		break;

		case DIO_PortB:
		PORTB_R = PortValue;
    1cdc:	e8 e3       	ldi	r30, 0x38	; 56
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	80 83       	st	Z, r24
    1ce4:	09 c0       	rjmp	.+18     	; 0x1cf8 <DIO_WritePort+0x74>
		break;

		case DIO_PortC:
		PORTC_R = PortValue;
    1ce6:	e5 e3       	ldi	r30, 0x35	; 53
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	80 83       	st	Z, r24
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <DIO_WritePort+0x74>
		break;

		case DIO_PortD:
		PORTD_R = PortValue;
    1cf0:	e2 e3       	ldi	r30, 0x32	; 50
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	80 83       	st	Z, r24
		break;
	}


}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <DIO_ConfigureChannel>:



void DIO_ConfigureChannel (DIO_ChannelType ChannelId, DIO_DirType Direction)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <DIO_ConfigureChannel+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <DIO_ConfigureChannel+0x8>
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <DIO_ConfigureChannel+0xa>
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	6c 83       	std	Y+4, r22	; 0x04
	DIO_PortType Portx = ChannelId/8;
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	86 95       	lsr	r24
    1d1c:	86 95       	lsr	r24
    1d1e:	86 95       	lsr	r24
    1d20:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelType BitNo = ChannelId%8;
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	87 70       	andi	r24, 0x07	; 7
    1d26:	89 83       	std	Y+1, r24	; 0x01

	switch (Portx)
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	3e 83       	std	Y+6, r19	; 0x06
    1d30:	2d 83       	std	Y+5, r18	; 0x05
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	91 05       	cpc	r25, r1
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <DIO_ConfigureChannel+0x38>
    1d3c:	43 c0       	rjmp	.+134    	; 0x1dc4 <DIO_ConfigureChannel+0xbe>
    1d3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d40:	3e 81       	ldd	r19, Y+6	; 0x06
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <DIO_ConfigureChannel+0x4c>
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	71 f0       	breq	.+28     	; 0x1d6c <DIO_ConfigureChannel+0x66>
    1d50:	bc c0       	rjmp	.+376    	; 0x1eca <DIO_ConfigureChannel+0x1c4>
    1d52:	2d 81       	ldd	r18, Y+5	; 0x05
    1d54:	3e 81       	ldd	r19, Y+6	; 0x06
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <DIO_ConfigureChannel+0x58>
    1d5c:	5f c0       	rjmp	.+190    	; 0x1e1c <DIO_ConfigureChannel+0x116>
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	83 30       	cpi	r24, 0x03	; 3
    1d64:	91 05       	cpc	r25, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <DIO_ConfigureChannel+0x64>
    1d68:	85 c0       	rjmp	.+266    	; 0x1e74 <DIO_ConfigureChannel+0x16e>
    1d6a:	af c0       	rjmp	.+350    	; 0x1eca <DIO_ConfigureChannel+0x1c4>
	{
		case DIO_PortA:
		if (Direction == Output)
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	a1 f4       	brne	.+40     	; 0x1d9a <DIO_ConfigureChannel+0x94>
		{
			SetBit(DDRA_R,BitNo);
    1d72:	aa e3       	ldi	r26, 0x3A	; 58
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	ea e3       	ldi	r30, 0x3A	; 58
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_ConfigureChannel+0x8a>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_ConfigureChannel+0x86>
    1d94:	84 2b       	or	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	98 c0       	rjmp	.+304    	; 0x1eca <DIO_ConfigureChannel+0x1c4>
		}
		else{
			ClearBit(DDRA_R,BitNo);
    1d9a:	aa e3       	ldi	r26, 0x3A	; 58
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ea e3       	ldi	r30, 0x3A	; 58
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_ConfigureChannel+0xb2>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_ConfigureChannel+0xae>
    1dbc:	80 95       	com	r24
    1dbe:	84 23       	and	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	83 c0       	rjmp	.+262    	; 0x1eca <DIO_ConfigureChannel+0x1c4>
		}
		break;

		case DIO_PortB:
		if (Direction == Output)
    1dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	a1 f4       	brne	.+40     	; 0x1df2 <DIO_ConfigureChannel+0xec>
		{
			SetBit(DDRB_R,BitNo);
    1dca:	a7 e3       	ldi	r26, 0x37	; 55
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e7 e3       	ldi	r30, 0x37	; 55
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_ConfigureChannel+0xe2>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_ConfigureChannel+0xde>
    1dec:	84 2b       	or	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	6c c0       	rjmp	.+216    	; 0x1eca <DIO_ConfigureChannel+0x1c4>
		}
		else{
			ClearBit(DDRB_R,BitNo);
    1df2:	a7 e3       	ldi	r26, 0x37	; 55
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e7 e3       	ldi	r30, 0x37	; 55
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_ConfigureChannel+0x10a>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_ConfigureChannel+0x106>
    1e14:	80 95       	com	r24
    1e16:	84 23       	and	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	57 c0       	rjmp	.+174    	; 0x1eca <DIO_ConfigureChannel+0x1c4>
		}
		break;

		case DIO_PortC:
		if (Direction == Output)
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	a1 f4       	brne	.+40     	; 0x1e4a <DIO_ConfigureChannel+0x144>
		{
			SetBit(DDRC_R,BitNo);
    1e22:	a4 e3       	ldi	r26, 0x34	; 52
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e4 e3       	ldi	r30, 0x34	; 52
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_ConfigureChannel+0x13a>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_ConfigureChannel+0x136>
    1e44:	84 2b       	or	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	40 c0       	rjmp	.+128    	; 0x1eca <DIO_ConfigureChannel+0x1c4>
		}
		else{
			ClearBit(DDRC_R,BitNo);
    1e4a:	a4 e3       	ldi	r26, 0x34	; 52
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e4 e3       	ldi	r30, 0x34	; 52
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_ConfigureChannel+0x162>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <DIO_ConfigureChannel+0x15e>
    1e6c:	80 95       	com	r24
    1e6e:	84 23       	and	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	2b c0       	rjmp	.+86     	; 0x1eca <DIO_ConfigureChannel+0x1c4>
		}
		break;

		case DIO_PortD:
		if (Direction == Output)
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	a1 f4       	brne	.+40     	; 0x1ea2 <DIO_ConfigureChannel+0x19c>
		{
			SetBit(DDRD_R,BitNo);
    1e7a:	a1 e3       	ldi	r26, 0x31	; 49
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e1 e3       	ldi	r30, 0x31	; 49
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	48 2f       	mov	r20, r24
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 2e       	mov	r0, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <DIO_ConfigureChannel+0x192>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	0a 94       	dec	r0
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <DIO_ConfigureChannel+0x18e>
    1e9c:	84 2b       	or	r24, r20
    1e9e:	8c 93       	st	X, r24
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <DIO_ConfigureChannel+0x1c4>
		}
		else{
			ClearBit(DDRD_R,BitNo);
    1ea2:	a1 e3       	ldi	r26, 0x31	; 49
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e1 e3       	ldi	r30, 0x31	; 49
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 2f       	mov	r20, r24
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 2e       	mov	r0, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_ConfigureChannel+0x1ba>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	0a 94       	dec	r0
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <DIO_ConfigureChannel+0x1b6>
    1ec4:	80 95       	com	r24
    1ec6:	84 23       	and	r24, r20
    1ec8:	8c 93       	st	X, r24
		}
		break;
	}


}
    1eca:	26 96       	adiw	r28, 0x06	; 6
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <ADC_Init>:
 */

#include "ADC_Config.h"
#include "ADC_Interface.h"

void ADC_Init(void){
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
	SetBit(ADMUX_Reg,ADCMUX_REFS1_Bit);//Internal Vref
    1ee4:	a7 e2       	ldi	r26, 0x27	; 39
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e7 e2       	ldi	r30, 0x27	; 39
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 68       	ori	r24, 0x80	; 128
    1ef0:	8c 93       	st	X, r24
	SetBit(ADMUX_Reg,ADCMUX_REFS0_Bit);
    1ef2:	a7 e2       	ldi	r26, 0x27	; 39
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e7 e2       	ldi	r30, 0x27	; 39
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	80 64       	ori	r24, 0x40	; 64
    1efe:	8c 93       	st	X, r24
	SetBit(ADCSRA_Reg,ADCSRA_ADPS0_Bit);//F_CPU/128
    1f00:	a6 e2       	ldi	r26, 0x26	; 38
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e6 e2       	ldi	r30, 0x26	; 38
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	81 60       	ori	r24, 0x01	; 1
    1f0c:	8c 93       	st	X, r24
	SetBit(ADCSRA_Reg,ADCSRA_ADPS1_Bit);
    1f0e:	a6 e2       	ldi	r26, 0x26	; 38
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e6 e2       	ldi	r30, 0x26	; 38
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	8c 93       	st	X, r24
	SetBit(ADCSRA_Reg,ADCSRA_ADPS2_Bit);
    1f1c:	a6 e2       	ldi	r26, 0x26	; 38
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e6 e2       	ldi	r30, 0x26	; 38
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	84 60       	ori	r24, 0x04	; 4
    1f28:	8c 93       	st	X, r24
	SetBit(ADCSRA_Reg,ADCSRA_ADEN_Bit);//Enable ADC
    1f2a:	a6 e2       	ldi	r26, 0x26	; 38
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e6 e2       	ldi	r30, 0x26	; 38
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	80 68       	ori	r24, 0x80	; 128
    1f36:	8c 93       	st	X, r24
}
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <ADC_Read>:
int16 ADC_Read(ADC_ChannelType ChannelId){
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <ADC_Read+0x6>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
	int16 temp = 0;
    1f4c:	1a 82       	std	Y+2, r1	; 0x02
    1f4e:	19 82       	std	Y+1, r1	; 0x01
	ADMUX_Reg = (ADMUX_Reg & 0xE0) | (ChannelId & 0x1F);
    1f50:	a7 e2       	ldi	r26, 0x27	; 39
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e7 e2       	ldi	r30, 0x27	; 39
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	90 7e       	andi	r25, 0xE0	; 224
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	8f 71       	andi	r24, 0x1F	; 31
    1f62:	89 2b       	or	r24, r25
    1f64:	8c 93       	st	X, r24
	SetBit(ADCSRA_Reg,ADCSRA_ADSC_Bit);
    1f66:	a6 e2       	ldi	r26, 0x26	; 38
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e6 e2       	ldi	r30, 0x26	; 38
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 64       	ori	r24, 0x40	; 64
    1f72:	8c 93       	st	X, r24
	while(GetBit(ADCSRA_Reg,ADCSRA_ADIF_Bit) == 0);//wait finish conversion
    1f74:	e6 e2       	ldi	r30, 0x26	; 38
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	82 95       	swap	r24
    1f7c:	8f 70       	andi	r24, 0x0F	; 15
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	81 70       	andi	r24, 0x01	; 1
    1f84:	90 70       	andi	r25, 0x00	; 0
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	a9 f3       	breq	.-22     	; 0x1f74 <ADC_Read+0x36>
	SetBit(ADCSRA_Reg,ADCSRA_ADIF_Bit);//clear the flag
    1f8a:	a6 e2       	ldi	r26, 0x26	; 38
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e6 e2       	ldi	r30, 0x26	; 38
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	80 61       	ori	r24, 0x10	; 16
    1f96:	8c 93       	st	X, r24
	temp = ADCL_Reg;
    1f98:	e4 e2       	ldi	r30, 0x24	; 36
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
	temp |= (ADCH_Reg << 8);
    1fa6:	e5 e2       	ldi	r30, 0x25	; 37
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	38 2f       	mov	r19, r24
    1fb2:	22 27       	eor	r18, r18
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	82 2b       	or	r24, r18
    1fba:	93 2b       	or	r25, r19
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <SSD_Init>:

#include "SSD_Interface.h"


void SSD_Init(void)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	DIO_ChannelType count = DIO_ChannelA4;
    1fda:	84 e0       	ldi	r24, 0x04	; 4
    1fdc:	89 83       	std	Y+1, r24	; 0x01

	for(count = DIO_ChannelA4 ; count<=(DIO_ChannelA7 - DIO_ChannelA4) ; count++)
    1fde:	84 e0       	ldi	r24, 0x04	; 4
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	07 c0       	rjmp	.+14     	; 0x1ff2 <SSD_Init+0x22>
	{
		DIO_ConfigureChannel(count, Output);
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>

void SSD_Init(void)
{
	DIO_ChannelType count = DIO_ChannelA4;

	for(count = DIO_ChannelA4 ; count<=(DIO_ChannelA7 - DIO_ChannelA4) ; count++)
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	84 30       	cpi	r24, 0x04	; 4
    1ff6:	b0 f3       	brcs	.-20     	; 0x1fe4 <SSD_Init+0x14>
	{
		DIO_ConfigureChannel(count, Output);
	}

	for(count = DIO_ChannelB4 ; count<=(DIO_ChannelB7 - DIO_ChannelB4) ; count++)
    1ff8:	8c e0       	ldi	r24, 0x0C	; 12
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	07 c0       	rjmp	.+14     	; 0x200c <SSD_Init+0x3c>
	{
		DIO_ConfigureChannel(count, Output);
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	for(count = DIO_ChannelA4 ; count<=(DIO_ChannelA7 - DIO_ChannelA4) ; count++)
	{
		DIO_ConfigureChannel(count, Output);
	}

	for(count = DIO_ChannelB4 ; count<=(DIO_ChannelB7 - DIO_ChannelB4) ; count++)
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	8f 5f       	subi	r24, 0xFF	; 255
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	84 30       	cpi	r24, 0x04	; 4
    2010:	b0 f3       	brcs	.-20     	; 0x1ffe <SSD_Init+0x2e>
	{
		DIO_ConfigureChannel(count, Output);
	}

	DIO_ConfigureChannel(SSD_FirstDigit_En, Output);
    2012:	8a e0       	ldi	r24, 0x0A	; 10
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(SSD_SecondDigit_En, Output);
    201a:	89 e0       	ldi	r24, 0x09	; 9
    201c:	61 e0       	ldi	r22, 0x01	; 1
    201e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>

}
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <SSD_WriteNum>:


void SSD_WriteNum(uint8 FirstDigit,uint8 SecondDigit){
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	e4 97       	sbiw	r28, 0x34	; 52
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	8b ab       	std	Y+51, r24	; 0x33
    2040:	6c ab       	std	Y+52, r22	; 0x34
	uint8 PortValue = 0;
    2042:	1a aa       	std	Y+50, r1	; 0x32
	for (uint8 w=0;w<200;w++)
    2044:	19 aa       	std	Y+49, r1	; 0x31
    2046:	bb c1       	rjmp	.+886    	; 0x23be <SSD_WriteNum+0x394>
	{
		PortValue = DIO_ReadPort(SSD_FirstDigit_DataPort);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <DIO_ReadPort>
    204e:	8a ab       	std	Y+50, r24	; 0x32
		PortValue = (PortValue & 0x0F) | (FirstDigit<<4);
    2050:	8a a9       	ldd	r24, Y+50	; 0x32
    2052:	28 2f       	mov	r18, r24
    2054:	2f 70       	andi	r18, 0x0F	; 15
    2056:	8b a9       	ldd	r24, Y+51	; 0x33
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	82 95       	swap	r24
    205e:	92 95       	swap	r25
    2060:	90 7f       	andi	r25, 0xF0	; 240
    2062:	98 27       	eor	r25, r24
    2064:	80 7f       	andi	r24, 0xF0	; 240
    2066:	98 27       	eor	r25, r24
    2068:	82 2b       	or	r24, r18
    206a:	8a ab       	std	Y+50, r24	; 0x32
		DIO_WritePort(SSD_FirstDigit_DataPort,PortValue);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	6a a9       	ldd	r22, Y+50	; 0x32
    2070:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_WritePort>
		DIO_WriteChannel(SSD_FirstDigit_En,STD_Low);
    2074:	8a e0       	ldi	r24, 0x0A	; 10
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a8 ec       	ldi	r26, 0xC8	; 200
    2082:	b2 e4       	ldi	r27, 0x42	; 66
    2084:	8d a7       	std	Y+45, r24	; 0x2d
    2086:	9e a7       	std	Y+46, r25	; 0x2e
    2088:	af a7       	std	Y+47, r26	; 0x2f
    208a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    208c:	6d a5       	ldd	r22, Y+45	; 0x2d
    208e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2090:	8f a5       	ldd	r24, Y+47	; 0x2f
    2092:	98 a9       	ldd	r25, Y+48	; 0x30
    2094:	2b ea       	ldi	r18, 0xAB	; 171
    2096:	3a ea       	ldi	r19, 0xAA	; 170
    2098:	4a ea       	ldi	r20, 0xAA	; 170
    209a:	50 e4       	ldi	r21, 0x40	; 64
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	89 a7       	std	Y+41, r24	; 0x29
    20a6:	9a a7       	std	Y+42, r25	; 0x2a
    20a8:	ab a7       	std	Y+43, r26	; 0x2b
    20aa:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20ac:	69 a5       	ldd	r22, Y+41	; 0x29
    20ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    20b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	1c f4       	brge	.+6      	; 0x20ca <SSD_WriteNum+0xa0>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	88 a7       	std	Y+40, r24	; 0x28
    20c8:	91 c0       	rjmp	.+290    	; 0x21ec <SSD_WriteNum+0x1c2>
	else if (__tmp > 255)
    20ca:	69 a5       	ldd	r22, Y+41	; 0x29
    20cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    20ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	53 e4       	ldi	r21, 0x43	; 67
    20da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	0c f0       	brlt	.+2      	; 0x20e4 <SSD_WriteNum+0xba>
    20e2:	7b c0       	rjmp	.+246    	; 0x21da <SSD_WriteNum+0x1b0>
	{
		_delay_ms(__us / 1000.0);
    20e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    20e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    20e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ea:	98 a9       	ldd	r25, Y+48	; 0x30
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a e7       	ldi	r20, 0x7A	; 122
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8c a3       	std	Y+36, r24	; 0x24
    20fe:	9d a3       	std	Y+37, r25	; 0x25
    2100:	ae a3       	std	Y+38, r26	; 0x26
    2102:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6c a1       	ldd	r22, Y+36	; 0x24
    2106:	7d a1       	ldd	r23, Y+37	; 0x25
    2108:	8e a1       	ldd	r24, Y+38	; 0x26
    210a:	9f a1       	ldd	r25, Y+39	; 0x27
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	55 e4       	ldi	r21, 0x45	; 69
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	88 a3       	std	Y+32, r24	; 0x20
    211e:	99 a3       	std	Y+33, r25	; 0x21
    2120:	aa a3       	std	Y+34, r26	; 0x22
    2122:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2124:	68 a1       	ldd	r22, Y+32	; 0x20
    2126:	79 a1       	ldd	r23, Y+33	; 0x21
    2128:	8a a1       	ldd	r24, Y+34	; 0x22
    212a:	9b a1       	ldd	r25, Y+35	; 0x23
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <SSD_WriteNum+0x11c>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9f 8f       	std	Y+31, r25	; 0x1f
    2142:	8e 8f       	std	Y+30, r24	; 0x1e
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <SSD_WriteNum+0x19a>
	else if (__tmp > 65535)
    2146:	68 a1       	ldd	r22, Y+32	; 0x20
    2148:	79 a1       	ldd	r23, Y+33	; 0x21
    214a:	8a a1       	ldd	r24, Y+34	; 0x22
    214c:	9b a1       	ldd	r25, Y+35	; 0x23
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <SSD_WriteNum+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6c a1       	ldd	r22, Y+36	; 0x24
    2160:	7d a1       	ldd	r23, Y+37	; 0x25
    2162:	8e a1       	ldd	r24, Y+38	; 0x26
    2164:	9f a1       	ldd	r25, Y+39	; 0x27
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9f 8f       	std	Y+31, r25	; 0x1f
    2184:	8e 8f       	std	Y+30, r24	; 0x1e
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <SSD_WriteNum+0x17c>
    2188:	80 e9       	ldi	r24, 0x90	; 144
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	9d 8f       	std	Y+29, r25	; 0x1d
    218e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2190:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2192:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <SSD_WriteNum+0x16a>
    2198:	9d 8f       	std	Y+29, r25	; 0x1d
    219a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    219e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9f 8f       	std	Y+31, r25	; 0x1f
    21a4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <SSD_WriteNum+0x15e>
    21ae:	24 c0       	rjmp	.+72     	; 0x21f8 <SSD_WriteNum+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	68 a1       	ldd	r22, Y+32	; 0x20
    21b2:	79 a1       	ldd	r23, Y+33	; 0x21
    21b4:	8a a1       	ldd	r24, Y+34	; 0x22
    21b6:	9b a1       	ldd	r25, Y+35	; 0x23
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9f 8f       	std	Y+31, r25	; 0x1f
    21c2:	8e 8f       	std	Y+30, r24	; 0x1e
    21c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21c8:	9b 8f       	std	Y+27, r25	; 0x1b
    21ca:	8a 8f       	std	Y+26, r24	; 0x1a
    21cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <SSD_WriteNum+0x1a6>
    21d4:	9b 8f       	std	Y+27, r25	; 0x1b
    21d6:	8a 8f       	std	Y+26, r24	; 0x1a
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <SSD_WriteNum+0x1ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21da:	69 a5       	ldd	r22, Y+41	; 0x29
    21dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    21de:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	88 a7       	std	Y+40, r24	; 0x28
    21ec:	88 a5       	ldd	r24, Y+40	; 0x28
    21ee:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21f0:	89 8d       	ldd	r24, Y+25	; 0x19
    21f2:	8a 95       	dec	r24
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <SSD_WriteNum+0x1c8>
    21f6:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(100);
		DIO_WriteChannel(SSD_FirstDigit_En,STD_High);
    21f8:	8a e0       	ldi	r24, 0x0A	; 10
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>

		PortValue = DIO_ReadPort(SSD_SecondDigit_DataPort);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <DIO_ReadPort>
    2206:	8a ab       	std	Y+50, r24	; 0x32
		PortValue = (PortValue & 0x0F) | (SecondDigit<<4);
    2208:	8a a9       	ldd	r24, Y+50	; 0x32
    220a:	28 2f       	mov	r18, r24
    220c:	2f 70       	andi	r18, 0x0F	; 15
    220e:	8c a9       	ldd	r24, Y+52	; 0x34
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	82 95       	swap	r24
    2216:	92 95       	swap	r25
    2218:	90 7f       	andi	r25, 0xF0	; 240
    221a:	98 27       	eor	r25, r24
    221c:	80 7f       	andi	r24, 0xF0	; 240
    221e:	98 27       	eor	r25, r24
    2220:	82 2b       	or	r24, r18
    2222:	8a ab       	std	Y+50, r24	; 0x32
		DIO_WritePort(SSD_SecondDigit_DataPort,PortValue);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	6a a9       	ldd	r22, Y+50	; 0x32
    2228:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_WritePort>
		DIO_WriteChannel(SSD_SecondDigit_En,STD_Low);
    222c:	89 e0       	ldi	r24, 0x09	; 9
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a8 ec       	ldi	r26, 0xC8	; 200
    223a:	b2 e4       	ldi	r27, 0x42	; 66
    223c:	8d 8b       	std	Y+21, r24	; 0x15
    223e:	9e 8b       	std	Y+22, r25	; 0x16
    2240:	af 8b       	std	Y+23, r26	; 0x17
    2242:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2244:	6d 89       	ldd	r22, Y+21	; 0x15
    2246:	7e 89       	ldd	r23, Y+22	; 0x16
    2248:	8f 89       	ldd	r24, Y+23	; 0x17
    224a:	98 8d       	ldd	r25, Y+24	; 0x18
    224c:	2b ea       	ldi	r18, 0xAB	; 171
    224e:	3a ea       	ldi	r19, 0xAA	; 170
    2250:	4a ea       	ldi	r20, 0xAA	; 170
    2252:	50 e4       	ldi	r21, 0x40	; 64
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	89 8b       	std	Y+17, r24	; 0x11
    225e:	9a 8b       	std	Y+18, r25	; 0x12
    2260:	ab 8b       	std	Y+19, r26	; 0x13
    2262:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2264:	69 89       	ldd	r22, Y+17	; 0x11
    2266:	7a 89       	ldd	r23, Y+18	; 0x12
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	1c f4       	brge	.+6      	; 0x2282 <SSD_WriteNum+0x258>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	88 8b       	std	Y+16, r24	; 0x10
    2280:	91 c0       	rjmp	.+290    	; 0x23a4 <SSD_WriteNum+0x37a>
	else if (__tmp > 255)
    2282:	69 89       	ldd	r22, Y+17	; 0x11
    2284:	7a 89       	ldd	r23, Y+18	; 0x12
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	53 e4       	ldi	r21, 0x43	; 67
    2292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	0c f0       	brlt	.+2      	; 0x229c <SSD_WriteNum+0x272>
    229a:	7b c0       	rjmp	.+246    	; 0x2392 <SSD_WriteNum+0x368>
	{
		_delay_ms(__us / 1000.0);
    229c:	6d 89       	ldd	r22, Y+21	; 0x15
    229e:	7e 89       	ldd	r23, Y+22	; 0x16
    22a0:	8f 89       	ldd	r24, Y+23	; 0x17
    22a2:	98 8d       	ldd	r25, Y+24	; 0x18
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8c 87       	std	Y+12, r24	; 0x0c
    22b6:	9d 87       	std	Y+13, r25	; 0x0d
    22b8:	ae 87       	std	Y+14, r26	; 0x0e
    22ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    22be:	7d 85       	ldd	r23, Y+13	; 0x0d
    22c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a e7       	ldi	r20, 0x7A	; 122
    22ca:	55 e4       	ldi	r21, 0x45	; 69
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	88 87       	std	Y+8, r24	; 0x08
    22d6:	99 87       	std	Y+9, r25	; 0x09
    22d8:	aa 87       	std	Y+10, r26	; 0x0a
    22da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22dc:	68 85       	ldd	r22, Y+8	; 0x08
    22de:	79 85       	ldd	r23, Y+9	; 0x09
    22e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <SSD_WriteNum+0x2d4>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9f 83       	std	Y+7, r25	; 0x07
    22fa:	8e 83       	std	Y+6, r24	; 0x06
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <SSD_WriteNum+0x352>
	else if (__tmp > 65535)
    22fe:	68 85       	ldd	r22, Y+8	; 0x08
    2300:	79 85       	ldd	r23, Y+9	; 0x09
    2302:	8a 85       	ldd	r24, Y+10	; 0x0a
    2304:	9b 85       	ldd	r25, Y+11	; 0x0b
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <SSD_WriteNum+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	6c 85       	ldd	r22, Y+12	; 0x0c
    2318:	7d 85       	ldd	r23, Y+13	; 0x0d
    231a:	8e 85       	ldd	r24, Y+14	; 0x0e
    231c:	9f 85       	ldd	r25, Y+15	; 0x0f
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9f 83       	std	Y+7, r25	; 0x07
    233c:	8e 83       	std	Y+6, r24	; 0x06
    233e:	0f c0       	rjmp	.+30     	; 0x235e <SSD_WriteNum+0x334>
    2340:	80 e9       	ldi	r24, 0x90	; 144
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	9d 83       	std	Y+5, r25	; 0x05
    2346:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <SSD_WriteNum+0x322>
    2350:	9d 83       	std	Y+5, r25	; 0x05
    2352:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8e 81       	ldd	r24, Y+6	; 0x06
    2356:	9f 81       	ldd	r25, Y+7	; 0x07
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9f 83       	std	Y+7, r25	; 0x07
    235c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8e 81       	ldd	r24, Y+6	; 0x06
    2360:	9f 81       	ldd	r25, Y+7	; 0x07
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <SSD_WriteNum+0x316>
    2366:	24 c0       	rjmp	.+72     	; 0x23b0 <SSD_WriteNum+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	68 85       	ldd	r22, Y+8	; 0x08
    236a:	79 85       	ldd	r23, Y+9	; 0x09
    236c:	8a 85       	ldd	r24, Y+10	; 0x0a
    236e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9f 83       	std	Y+7, r25	; 0x07
    237a:	8e 83       	std	Y+6, r24	; 0x06
    237c:	8e 81       	ldd	r24, Y+6	; 0x06
    237e:	9f 81       	ldd	r25, Y+7	; 0x07
    2380:	9b 83       	std	Y+3, r25	; 0x03
    2382:	8a 83       	std	Y+2, r24	; 0x02
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	9b 81       	ldd	r25, Y+3	; 0x03
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <SSD_WriteNum+0x35e>
    238c:	9b 83       	std	Y+3, r25	; 0x03
    238e:	8a 83       	std	Y+2, r24	; 0x02
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <SSD_WriteNum+0x386>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2392:	69 89       	ldd	r22, Y+17	; 0x11
    2394:	7a 89       	ldd	r23, Y+18	; 0x12
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	88 8b       	std	Y+16, r24	; 0x10
    23a4:	88 89       	ldd	r24, Y+16	; 0x10
    23a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	8a 95       	dec	r24
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <SSD_WriteNum+0x380>
    23ae:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_WriteChannel(SSD_SecondDigit_En,STD_High);
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
}


void SSD_WriteNum(uint8 FirstDigit,uint8 SecondDigit){
	uint8 PortValue = 0;
	for (uint8 w=0;w<200;w++)
    23b8:	89 a9       	ldd	r24, Y+49	; 0x31
    23ba:	8f 5f       	subi	r24, 0xFF	; 255
    23bc:	89 ab       	std	Y+49, r24	; 0x31
    23be:	89 a9       	ldd	r24, Y+49	; 0x31
    23c0:	88 3c       	cpi	r24, 0xC8	; 200
    23c2:	08 f4       	brcc	.+2      	; 0x23c6 <SSD_WriteNum+0x39c>
    23c4:	41 ce       	rjmp	.-894    	; 0x2048 <SSD_WriteNum+0x1e>
		DIO_WritePort(SSD_SecondDigit_DataPort,PortValue);
		DIO_WriteChannel(SSD_SecondDigit_En,STD_Low);
		_delay_us(100);
		DIO_WriteChannel(SSD_SecondDigit_En,STD_High);
	}
}
    23c6:	e4 96       	adiw	r28, 0x34	; 52
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <Relay_Init>:

#include "Relay_Interface.h"


void Relay_Init(void)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
	DIO_ConfigureChannel(RELAY_1, Output);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(RELAY_2, Output);
    23e8:	83 e1       	ldi	r24, 0x13	; 19
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	DIO_WriteChannel(RELAY_1, STD_Low);
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
	DIO_WriteChannel(RELAY_2, STD_Low);
    23f8:	83 e1       	ldi	r24, 0x13	; 19
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <Relay_switchON>:
void Relay_switchON(DIO_ChannelType RelayNo)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	0f 92       	push	r0
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	89 83       	std	Y+1, r24	; 0x01
	DIO_WriteChannel(RelayNo, STD_High);
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
}
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <Relay_switchOFF>:
void Relay_switchOFF(DIO_ChannelType RelayNo)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	0f 92       	push	r0
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	89 83       	std	Y+1, r24	; 0x01
	DIO_WriteChannel(RelayNo, STD_Low);
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
}
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <Peltier_Init>:
 */

#include "Peltier_Interface.h"

void Peltier_Init(void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
	DIO_ConfigureChannel(PELTIER_Channel, Output);
    2446:	83 e1       	ldi	r24, 0x13	; 19
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	Peltier_SetMode(PELTIER_UNDEFINED_MODE);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	0e 94 2d 12 	call	0x245a	; 0x245a <Peltier_SetMode>
}
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <Peltier_SetMode>:

void Peltier_SetMode(Peltier_ModeType PeltierMode)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <Peltier_SetMode+0x6>
    2460:	0f 92       	push	r0
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	89 83       	std	Y+1, r24	; 0x01
	switch(PeltierMode)
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3b 83       	std	Y+3, r19	; 0x03
    2470:	2a 83       	std	Y+2, r18	; 0x02
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	49 f0       	breq	.+18     	; 0x248c <Peltier_SetMode+0x32>
    247a:	2a 81       	ldd	r18, Y+2	; 0x02
    247c:	3b 81       	ldd	r19, Y+3	; 0x03
    247e:	21 30       	cpi	r18, 0x01	; 1
    2480:	31 05       	cpc	r19, r1
    2482:	39 f4       	brne	.+14     	; 0x2492 <Peltier_SetMode+0x38>
	{
		case (PELTIER_ON_MODE):
		{
			Relay_switchON(PELTIER_Channel);
    2484:	83 e1       	ldi	r24, 0x13	; 19
    2486:	0e 94 03 12 	call	0x2406	; 0x2406 <Relay_switchON>
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <Peltier_SetMode+0x38>
			break;
		}
		case (PELTIER_OFF_MODE):
		{
			Relay_switchOFF(PELTIER_Channel);
    248c:	83 e1       	ldi	r24, 0x13	; 19
    248e:	0e 94 11 12 	call	0x2422	; 0x2422 <Relay_switchOFF>
			break;
		}
		default: {}
	}

}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <LM35_Init>:
 */

#include "LM35_Interface.h"


void LM35_Init(void){
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	ADC_Init();
    24a6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <ADC_Init>
}
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <LM35_Read>:

int16 LM35_Read(ADC_ChannelType ChannelId){
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <LM35_Read+0x6>
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <LM35_Read+0x8>
    24b8:	0f 92       	push	r0
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	8b 83       	std	Y+3, r24	; 0x03
	int16 temp = 0;
    24c0:	1a 82       	std	Y+2, r1	; 0x02
    24c2:	19 82       	std	Y+1, r1	; 0x01
	temp = (ADC_Read(ChannelId))/4;
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <ADC_Read>
    24ca:	9d 83       	std	Y+5, r25	; 0x05
    24cc:	8c 83       	std	Y+4, r24	; 0x04
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	9d 81       	ldd	r25, Y+5	; 0x05
    24d2:	99 23       	and	r25, r25
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <LM35_Read+0x30>
    24d6:	8c 81       	ldd	r24, Y+4	; 0x04
    24d8:	9d 81       	ldd	r25, Y+5	; 0x05
    24da:	03 96       	adiw	r24, 0x03	; 3
    24dc:	9d 83       	std	Y+5, r25	; 0x05
    24de:	8c 83       	std	Y+4, r24	; 0x04
    24e0:	8c 81       	ldd	r24, Y+4	; 0x04
    24e2:	9d 81       	ldd	r25, Y+5	; 0x05
    24e4:	95 95       	asr	r25
    24e6:	87 95       	ror	r24
    24e8:	95 95       	asr	r25
    24ea:	87 95       	ror	r24
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <LED_Init>:
 */

#include "Led_Interface.h"

void LED_Init(void)
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
	DIO_ConfigureChannel(LED_0, Output);
    250c:	82 e1       	ldi	r24, 0x12	; 18
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(LED_1, Output);
    2514:	87 e1       	ldi	r24, 0x17	; 23
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(LED_2, Output);
    251c:	8b e1       	ldi	r24, 0x1B	; 27
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <SetLED_ON>:

void SetLED_ON (DIO_ChannelType ChannelId)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	0f 92       	push	r0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	89 83       	std	Y+1, r24	; 0x01
	DIO_WriteChannel(ChannelId, STD_High);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	61 e0       	ldi	r22, 0x01	; 1
    253a:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
}
    253e:	0f 90       	pop	r0
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <SetLED_OFF>:

void SetLED_OFF (DIO_ChannelType ChannelId)
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	0f 92       	push	r0
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	89 83       	std	Y+1, r24	; 0x01
	DIO_WriteChannel(ChannelId, STD_Low);
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_WriteChannel>
}
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <Flip_LED>:

void Flip_LED (DIO_ChannelType ChannelId)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	0f 92       	push	r0
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	89 83       	std	Y+1, r24	; 0x01
	DIO_ToggleChannel(ChannelId);
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <DIO_ToggleChannel>
}
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <Heater_Init>:

#include "CeramicHeater_Interface.h"


void Heater_Init(void)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
	DIO_ConfigureChannel(HEATER_Channel, Output);
    2584:	82 e0       	ldi	r24, 0x02	; 2
    2586:	61 e0       	ldi	r22, 0x01	; 1
    2588:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	Heater_SetMode(HEATER_UNDEFINED_MODE);
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	0e 94 cc 12 	call	0x2598	; 0x2598 <Heater_SetMode>
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <Heater_SetMode>:

void Heater_SetMode(Heater_ModeType HeaterMode)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <Heater_SetMode+0x6>
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	89 83       	std	Y+1, r24	; 0x01
	switch(HeaterMode)
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	3b 83       	std	Y+3, r19	; 0x03
    25ae:	2a 83       	std	Y+2, r18	; 0x02
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	49 f0       	breq	.+18     	; 0x25ca <Heater_SetMode+0x32>
    25b8:	2a 81       	ldd	r18, Y+2	; 0x02
    25ba:	3b 81       	ldd	r19, Y+3	; 0x03
    25bc:	21 30       	cpi	r18, 0x01	; 1
    25be:	31 05       	cpc	r19, r1
    25c0:	39 f4       	brne	.+14     	; 0x25d0 <Heater_SetMode+0x38>
	{
		case (HEATER_ON_MODE):
		{
			Relay_switchON(HEATER_Channel);
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	0e 94 03 12 	call	0x2406	; 0x2406 <Relay_switchON>
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <Heater_SetMode+0x38>
			break;
		}
		case (HEATER_OFF_MODE):
		{
			Relay_switchOFF(HEATER_Channel);
    25ca:	82 e0       	ldi	r24, 0x02	; 2
    25cc:	0e 94 11 12 	call	0x2422	; 0x2422 <Relay_switchOFF>
			break;
		}
		default: {}
	}

}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <Button_Init>:
 */

#include "Button_Interface.h"

void Button_Init(void)
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
	DIO_ConfigureChannel(Button_0, Input);
    25e4:	88 e0       	ldi	r24, 0x08	; 8
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(Button_1, Input);
    25ec:	8e e1       	ldi	r24, 0x1E	; 30
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(Button_2, Input);
    25f4:	8a e1       	ldi	r24, 0x1A	; 26
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_ConfigureChannel>
}
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <Button_getState>:
uint8 Button_getState(DIO_ChannelType ButtonNo)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <Button_getState+0x6>
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 buttonState = 0;
    260e:	19 82       	std	Y+1, r1	; 0x01
	buttonState = DIO_ReadChannel(ButtonNo);
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_ReadChannel>
    2616:	89 83       	std	Y+1, r24	; 0x01
	return buttonState;
    2618:	89 81       	ldd	r24, Y+1	; 0x01
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <SM_Init>:

static uint8 state;
static boolean ButtonState_Flag = FALSE;

void SM_Init(void)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	state = OFF_State;
    262c:	10 92 b5 00 	sts	0x00B5, r1

	Ext_INT_SetCallBack(Change_WaterHeater_State);
    2630:	86 e4       	ldi	r24, 0x46	; 70
    2632:	93 e1       	ldi	r25, 0x13	; 19
    2634:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <Ext_INT_SetCallBack>
	Ext_INT_SnControl(Ext_INT0,Rising_Edge);
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	62 e0       	ldi	r22, 0x02	; 2
    263c:	0e 94 0d 0a 	call	0x141a	; 0x141a <Ext_INT_SnControl>
	Ext_INT_Enable(Ext_INT0);	//Enable INT0
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	0e 94 a1 09 	call	0x1342	; 0x1342 <Ext_INT_Enable>
}
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <SM>:


void SM(void)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <SM+0x6>
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	switch(state)
    2656:	80 91 b5 00 	lds	r24, 0x00B5
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	3a 83       	std	Y+2, r19	; 0x02
    2660:	29 83       	std	Y+1, r18	; 0x01
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	31 f0       	breq	.+12     	; 0x2676 <SM+0x2a>
    266a:	29 81       	ldd	r18, Y+1	; 0x01
    266c:	3a 81       	ldd	r19, Y+2	; 0x02
    266e:	21 30       	cpi	r18, 0x01	; 1
    2670:	31 05       	cpc	r19, r1
    2672:	29 f0       	breq	.+10     	; 0x267e <SM+0x32>
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <SM+0x36>
	{
		case (OFF_State):
		{
				//All displays are off
				//SSD_WriteNum(0,0);
				SetLED_OFF(Heater_LED);
    2676:	87 e1       	ldi	r24, 0x17	; 23
    2678:	0e 94 a3 12 	call	0x2546	; 0x2546 <SetLED_OFF>
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <SM+0x36>
			break;
		}

		case (ON_State):
		{
				WaterHeater_Control();
    267e:	0e 94 a5 13 	call	0x274a	; 0x274a <WaterHeater_Control>
		}

		default: {}
	}

}
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <Change_WaterHeater_State>:


void Change_WaterHeater_State (void)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62

	if( ButtonState_Flag == TRUE )
    2694:	80 91 b4 00 	lds	r24, 0x00B4
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	49 f4       	brne	.+18     	; 0x26ae <Change_WaterHeater_State+0x22>
	{
		state = ON_State;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	80 93 b5 00 	sts	0x00B5, r24
		ButtonState_Flag = FALSE;
    26a2:	10 92 b4 00 	sts	0x00B4, r1
		Timer0_Start(No_Prescaler);
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	0e 94 88 06 	call	0xd10	; 0xd10 <Timer0_Start>
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <Change_WaterHeater_State+0x40>
	}
	else if( ButtonState_Flag == FALSE )
    26ae:	80 91 b4 00 	lds	r24, 0x00B4
    26b2:	88 23       	and	r24, r24
    26b4:	59 f4       	brne	.+22     	; 0x26cc <Change_WaterHeater_State+0x40>
	{
		state = OFF_State;
    26b6:	10 92 b5 00 	sts	0x00B5, r1
		ButtonState_Flag = TRUE;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	80 93 b4 00 	sts	0x00B4, r24
		SSD_WriteNum(0,0);
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	0e 94 15 10 	call	0x202a	; 0x202a <SSD_WriteNum>
		Stop_WaterHeater_Operation();
    26c8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <Stop_WaterHeater_Operation>
	}
	else
	{
	}

}
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <WaterHeater_Control_Init>:
static boolean TempDisplay_Flag = FALSE;
static boolean Display_Flag = TRUE;


void WaterHeater_Control_Init(void)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
	WaterHeater_mode = DEFAULT_MODE;
    26da:	10 92 c1 00 	sts	0x00C1, r1
	Setpoint = 60;
    26de:	8c e3       	ldi	r24, 0x3C	; 60
    26e0:	80 93 c3 00 	sts	0x00C3, r24

	DIO_Init();
    26e4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_Init>
	Button_Init();
    26e8:	0e 94 ee 12 	call	0x25dc	; 0x25dc <Button_Init>
	LED_Init();
    26ec:	0e 94 82 12 	call	0x2504	; 0x2504 <LED_Init>
	SSD_Init();
    26f0:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <SSD_Init>
	Relay_Init();
    26f4:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <Relay_Init>
	LM35_Init();
    26f8:	0e 94 4f 12 	call	0x249e	; 0x249e <LM35_Init>
	Heater_Init();
    26fc:	0e 94 be 12 	call	0x257c	; 0x257c <Heater_Init>
	Peltier_Init();
    2700:	0e 94 1f 12 	call	0x243e	; 0x243e <Peltier_Init>
	GINT_Enable_AllInterrupts();
    2704:	0e 94 85 09 	call	0x130a	; 0x130a <GINT_Enable_AllInterrupts>
	Timer0_SetCallBack(Read_WaterTemperature);
    2708:	8d e9       	ldi	r24, 0x9D	; 157
    270a:	94 e1       	ldi	r25, 0x14	; 20
    270c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Timer0_SetCallBack>
	Timer2_SetCallBack(Blink_SetPointTemperature_and_HeaterLED);
    2710:	8e ef       	ldi	r24, 0xFE	; 254
    2712:	94 e1       	ldi	r25, 0x14	; 20
    2714:	0e 94 73 09 	call	0x12e6	; 0x12e6 <Timer2_SetCallBack>
	Timer0_Init(NoClkSrc,0,TRUE);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Timer0_Init>
	Timer2_Init(NoClkSrc,0,TRUE);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <Timer2_Init>


	if(EEPROM_read(EEPROM_SP_Address) != 255)
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <EEPROM_read>
    2734:	8f 3f       	cpi	r24, 0xFF	; 255
    2736:	31 f0       	breq	.+12     	; 0x2744 <WaterHeater_Control_Init+0x72>
	{
		Setpoint = EEPROM_read(EEPROM_SP_Address);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <EEPROM_read>
    2740:	80 93 c3 00 	sts	0x00C3, r24
	}
}
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <WaterHeater_Control>:

void WaterHeater_Control(void)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <WaterHeater_Control+0x6>
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	static boolean ButtonDebouncing_Flag = FALSE;


	switch(WaterHeater_mode)
    2754:	80 91 c1 00 	lds	r24, 0x00C1
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	3a 83       	std	Y+2, r19	; 0x02
    275e:	29 83       	std	Y+1, r18	; 0x01
    2760:	49 81       	ldd	r20, Y+1	; 0x01
    2762:	5a 81       	ldd	r21, Y+2	; 0x02
    2764:	41 15       	cp	r20, r1
    2766:	51 05       	cpc	r21, r1
    2768:	39 f0       	breq	.+14     	; 0x2778 <WaterHeater_Control+0x2e>
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	81 30       	cpi	r24, 0x01	; 1
    2770:	91 05       	cpc	r25, r1
    2772:	09 f4       	brne	.+2      	; 0x2776 <WaterHeater_Control+0x2c>
    2774:	72 c0       	rjmp	.+228    	; 0x285a <WaterHeater_Control+0x110>
    2776:	dc c0       	rjmp	.+440    	; 0x2930 <WaterHeater_Control+0x1e6>
	{
		case(DEFAULT_MODE):
		{


			if( (Setpoint - TempReadings_Avg) == TEMP_CMP_NUM)
    2778:	80 91 c3 00 	lds	r24, 0x00C3
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	80 91 b6 00 	lds	r24, 0x00B6
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a9 01       	movw	r20, r18
    278a:	48 1b       	sub	r20, r24
    278c:	59 0b       	sbc	r21, r25
    278e:	ca 01       	movw	r24, r20
    2790:	85 30       	cpi	r24, 0x05	; 5
    2792:	91 05       	cpc	r25, r1
    2794:	99 f4       	brne	.+38     	; 0x27bc <WaterHeater_Control+0x72>
			{
				Heater_SetMode(HEATER_ON_MODE);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 cc 12 	call	0x2598	; 0x2598 <Heater_SetMode>
				Peltier_SetMode(PELTIER_OFF_MODE);
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	0e 94 2d 12 	call	0x245a	; 0x245a <Peltier_SetMode>

				if(StartLEDTimer_Flag == TRUE)
    27a2:	80 91 a8 00 	lds	r24, 0x00A8
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	c9 f5       	brne	.+114    	; 0x281c <WaterHeater_Control+0xd2>
				{
					Timer2_Start(No_Prescaler);
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	0e 94 23 08 	call	0x1046	; 0x1046 <Timer2_Start>

					StartLEDTimer_Flag = FALSE;
    27b0:	10 92 a8 00 	sts	0x00A8, r1
					LED_Blink_Flag = TRUE;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	80 93 b9 00 	sts	0x00B9, r24
    27ba:	30 c0       	rjmp	.+96     	; 0x281c <WaterHeater_Control+0xd2>
				}
				else {}
			}
			else if( (TempReadings_Avg - Setpoint) == TEMP_CMP_NUM)
    27bc:	80 91 b6 00 	lds	r24, 0x00B6
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	80 91 c3 00 	lds	r24, 0x00C3
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	a9 01       	movw	r20, r18
    27ce:	48 1b       	sub	r20, r24
    27d0:	59 0b       	sbc	r21, r25
    27d2:	ca 01       	movw	r24, r20
    27d4:	85 30       	cpi	r24, 0x05	; 5
    27d6:	91 05       	cpc	r25, r1
    27d8:	89 f4       	brne	.+34     	; 0x27fc <WaterHeater_Control+0xb2>
			{
				Heater_SetMode(HEATER_OFF_MODE);
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	0e 94 cc 12 	call	0x2598	; 0x2598 <Heater_SetMode>
				Peltier_SetMode(PELTIER_ON_MODE);
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	0e 94 2d 12 	call	0x245a	; 0x245a <Peltier_SetMode>

				Timer2_Stop();
    27e6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Timer2_Stop>
				LED_Blink_Flag = FALSE;
    27ea:	10 92 b9 00 	sts	0x00B9, r1
				StartLEDTimer_Flag = TRUE;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	80 93 a8 00 	sts	0x00A8, r24
				SetLED_ON(Heater_LED);
    27f4:	87 e1       	ldi	r24, 0x17	; 23
    27f6:	0e 94 95 12 	call	0x252a	; 0x252a <SetLED_ON>
    27fa:	10 c0       	rjmp	.+32     	; 0x281c <WaterHeater_Control+0xd2>
			}
			else
			{
				Timer2_Stop();
    27fc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Timer2_Stop>
				LED_Blink_Flag = FALSE;
    2800:	10 92 b9 00 	sts	0x00B9, r1
				StartLEDTimer_Flag = TRUE;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 a8 00 	sts	0x00A8, r24
				Heater_SetMode(HEATER_OFF_MODE);
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	0e 94 cc 12 	call	0x2598	; 0x2598 <Heater_SetMode>
				Peltier_SetMode(PELTIER_OFF_MODE);
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	0e 94 2d 12 	call	0x245a	; 0x245a <Peltier_SetMode>
				SetLED_OFF(Heater_LED);
    2816:	87 e1       	ldi	r24, 0x17	; 23
    2818:	0e 94 a3 12 	call	0x2546	; 0x2546 <SetLED_OFF>
			}




			if( Button_getState(UP_Button) == BUTTON_PRESSED || Button_getState(DOWN_Button) == BUTTON_PRESSED )
    281c:	88 e0       	ldi	r24, 0x08	; 8
    281e:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	31 f0       	breq	.+12     	; 0x2832 <WaterHeater_Control+0xe8>
    2826:	8e e1       	ldi	r24, 0x1E	; 30
    2828:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	09 f0       	breq	.+2      	; 0x2832 <WaterHeater_Control+0xe8>
    2830:	7f c0       	rjmp	.+254    	; 0x2930 <WaterHeater_Control+0x1e6>
			{
				Timer2_Stop();
    2832:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Timer2_Stop>
				LED_Blink_Flag = FALSE;
    2836:	10 92 b9 00 	sts	0x00B9, r1
				StartLEDTimer_Flag = TRUE;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	80 93 a8 00 	sts	0x00A8, r24
				SetLED_OFF(Heater_LED);
    2840:	87 e1       	ldi	r24, 0x17	; 23
    2842:	0e 94 a3 12 	call	0x2546	; 0x2546 <SetLED_OFF>

				WaterHeater_mode = TEMPERATURE_SETTING_MODE;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	80 93 c1 00 	sts	0x00C1, r24
				StartSSDTimer_Flag = TRUE;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	80 93 b8 00 	sts	0x00B8, r24
				ButtonDebouncing_Flag = TRUE;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	80 93 bc 00 	sts	0x00BC, r24
    2858:	6b c0       	rjmp	.+214    	; 0x2930 <WaterHeater_Control+0x1e6>
			break;
		}

		case(TEMPERATURE_SETTING_MODE):
		{
			if(StartSSDTimer_Flag == TRUE)
    285a:	80 91 b8 00 	lds	r24, 0x00B8
    285e:	81 30       	cpi	r24, 0x01	; 1
    2860:	41 f4       	brne	.+16     	; 0x2872 <WaterHeater_Control+0x128>
			{
				Timer2_Start(No_Prescaler);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	0e 94 23 08 	call	0x1046	; 0x1046 <Timer2_Start>

				SSD_Blink_Flag = TRUE;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	80 93 ba 00 	sts	0x00BA, r24
				StartSSDTimer_Flag = FALSE;
    286e:	10 92 b8 00 	sts	0x00B8, r1
			}
			else {}


			if(ButtonDebouncing_Flag == TRUE)
    2872:	80 91 bc 00 	lds	r24, 0x00BC
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	61 f4       	brne	.+24     	; 0x2892 <WaterHeater_Control+0x148>
			{
				while( Button_getState(UP_Button) == BUTTON_PRESSED || Button_getState(DOWN_Button) == BUTTON_PRESSED );
    287a:	88 e0       	ldi	r24, 0x08	; 8
    287c:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	d9 f3       	breq	.-10     	; 0x287a <WaterHeater_Control+0x130>
    2884:	8e e1       	ldi	r24, 0x1E	; 30
    2886:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	b1 f3       	breq	.-20     	; 0x287a <WaterHeater_Control+0x130>
				ButtonDebouncing_Flag = FALSE;
    288e:	10 92 bc 00 	sts	0x00BC, r1
			}


			if( Button_getState(UP_Button) == BUTTON_PRESSED && Setpoint < 75 )
    2892:	88 e0       	ldi	r24, 0x08	; 8
    2894:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	b1 f4       	brne	.+44     	; 0x28c8 <WaterHeater_Control+0x17e>
    289c:	80 91 c3 00 	lds	r24, 0x00C3
    28a0:	8b 34       	cpi	r24, 0x4B	; 75
    28a2:	90 f4       	brcc	.+36     	; 0x28c8 <WaterHeater_Control+0x17e>
			{
				Setpoint += TEMP_SETPOINT_OFFSET;
    28a4:	80 91 c3 00 	lds	r24, 0x00C3
    28a8:	8b 5f       	subi	r24, 0xFB	; 251
    28aa:	80 93 c3 00 	sts	0x00C3, r24
				EEPROM_write(EEPROM_SP_Address, Setpoint);
    28ae:	20 91 c3 00 	lds	r18, 0x00C3
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	62 2f       	mov	r22, r18
    28b8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <EEPROM_write>

				ButtonDebouncing_Flag = TRUE;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	80 93 bc 00 	sts	0x00BC, r24
				ButtonsReleased_Counter = 0;
    28c2:	10 92 b7 00 	sts	0x00B7, r1
    28c6:	34 c0       	rjmp	.+104    	; 0x2930 <WaterHeater_Control+0x1e6>
			}
			else if( Button_getState(DOWN_Button) == BUTTON_PRESSED && Setpoint > 35 )
    28c8:	8e e1       	ldi	r24, 0x1E	; 30
    28ca:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	b1 f4       	brne	.+44     	; 0x28fe <WaterHeater_Control+0x1b4>
    28d2:	80 91 c3 00 	lds	r24, 0x00C3
    28d6:	84 32       	cpi	r24, 0x24	; 36
    28d8:	90 f0       	brcs	.+36     	; 0x28fe <WaterHeater_Control+0x1b4>
			{
				Setpoint -= TEMP_SETPOINT_OFFSET;
    28da:	80 91 c3 00 	lds	r24, 0x00C3
    28de:	85 50       	subi	r24, 0x05	; 5
    28e0:	80 93 c3 00 	sts	0x00C3, r24
				EEPROM_write(EEPROM_SP_Address, Setpoint);
    28e4:	20 91 c3 00 	lds	r18, 0x00C3
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	62 2f       	mov	r22, r18
    28ee:	0e 94 9c 0a 	call	0x1538	; 0x1538 <EEPROM_write>

				ButtonDebouncing_Flag = TRUE;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	80 93 bc 00 	sts	0x00BC, r24
				ButtonsReleased_Counter = 0;
    28f8:	10 92 b7 00 	sts	0x00B7, r1
    28fc:	19 c0       	rjmp	.+50     	; 0x2930 <WaterHeater_Control+0x1e6>
			}
			else if( Button_getState(UP_Button) == BUTTON_RELEASED && Button_getState(DOWN_Button) == BUTTON_RELEASED )
    28fe:	88 e0       	ldi	r24, 0x08	; 8
    2900:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    2904:	88 23       	and	r24, r24
    2906:	a1 f4       	brne	.+40     	; 0x2930 <WaterHeater_Control+0x1e6>
    2908:	8e e1       	ldi	r24, 0x1E	; 30
    290a:	0e 94 01 13 	call	0x2602	; 0x2602 <Button_getState>
    290e:	88 23       	and	r24, r24
    2910:	79 f4       	brne	.+30     	; 0x2930 <WaterHeater_Control+0x1e6>
			{
				if( ButtonsReleased_Counter == 5)
    2912:	80 91 b7 00 	lds	r24, 0x00B7
    2916:	85 30       	cpi	r24, 0x05	; 5
    2918:	59 f4       	brne	.+22     	; 0x2930 <WaterHeater_Control+0x1e6>
				{
					Timer2_Stop();
    291a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Timer2_Stop>
					WaterHeater_mode = DEFAULT_MODE;
    291e:	10 92 c1 00 	sts	0x00C1, r1

					SSD_Blink_Flag = FALSE;
    2922:	10 92 ba 00 	sts	0x00BA, r1
					ButtonsReleased_Counter = 0;
    2926:	10 92 b7 00 	sts	0x00B7, r1
					TempDisplay_Flag = TRUE;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	80 93 bb 00 	sts	0x00BB, r24

		default: {}
	}


}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <Read_WaterTemperature>:

void Read_WaterTemperature(void)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	00 d0       	rcall	.+0      	; 0x2940 <Read_WaterTemperature+0x6>
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	uint8 Temp_firstDigit=0, Temp_secondDigit=0;
    2944:	1a 82       	std	Y+2, r1	; 0x02
    2946:	19 82       	std	Y+1, r1	; 0x01
	static uint8 prevTemp = 0;
	static uint16 Temp_Sum = 0;
	static uint8 TempReadings_Counter = 0;

	TempReadings_Counter++;
    2948:	80 91 bd 00 	lds	r24, 0x00BD
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	80 93 bd 00 	sts	0x00BD, r24


	Temperature = LM35_Read(TEMP_CHANNEL);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LM35_Read>
    2958:	80 93 c2 00 	sts	0x00C2, r24
	/* Check to display temperature to avoid many writings and blinkings on SSD */
	if( (Temperature != prevTemp && WaterHeater_mode == DEFAULT_MODE) || TempDisplay_Flag == TRUE)
    295c:	90 91 c2 00 	lds	r25, 0x00C2
    2960:	80 91 c0 00 	lds	r24, 0x00C0
    2964:	98 17       	cp	r25, r24
    2966:	21 f0       	breq	.+8      	; 0x2970 <Read_WaterTemperature+0x36>
    2968:	80 91 c1 00 	lds	r24, 0x00C1
    296c:	88 23       	and	r24, r24
    296e:	21 f0       	breq	.+8      	; 0x2978 <Read_WaterTemperature+0x3e>
    2970:	80 91 bb 00 	lds	r24, 0x00BB
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	a9 f4       	brne	.+42     	; 0x29a2 <Read_WaterTemperature+0x68>
	{
		/* SSD Display */
		Temp_secondDigit = Temperature % 10;
    2978:	80 91 c2 00 	lds	r24, 0x00C2
    297c:	9a e0       	ldi	r25, 0x0A	; 10
    297e:	69 2f       	mov	r22, r25
    2980:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__udivmodqi4>
    2984:	89 2f       	mov	r24, r25
    2986:	89 83       	std	Y+1, r24	; 0x01
		Temp_firstDigit = Temperature / 10;
    2988:	80 91 c2 00 	lds	r24, 0x00C2
    298c:	9a e0       	ldi	r25, 0x0A	; 10
    298e:	69 2f       	mov	r22, r25
    2990:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__udivmodqi4>
    2994:	8a 83       	std	Y+2, r24	; 0x02
		SSD_WriteNum(Temp_firstDigit, Temp_secondDigit);
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	69 81       	ldd	r22, Y+1	; 0x01
    299a:	0e 94 15 10 	call	0x202a	; 0x202a <SSD_WriteNum>

		TempDisplay_Flag = FALSE;
    299e:	10 92 bb 00 	sts	0x00BB, r1
	}
	prevTemp = Temperature;
    29a2:	80 91 c2 00 	lds	r24, 0x00C2
    29a6:	80 93 c0 00 	sts	0x00C0, r24


	Temp_Sum += Temperature;
    29aa:	80 91 c2 00 	lds	r24, 0x00C2
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	80 91 be 00 	lds	r24, 0x00BE
    29b6:	90 91 bf 00 	lds	r25, 0x00BF
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	90 93 bf 00 	sts	0x00BF, r25
    29c2:	80 93 be 00 	sts	0x00BE, r24
	if( TempReadings_Counter == TEMP_READCOUNT )
    29c6:	80 91 bd 00 	lds	r24, 0x00BD
    29ca:	8a 30       	cpi	r24, 0x0A	; 10
    29cc:	91 f4       	brne	.+36     	; 0x29f2 <Read_WaterTemperature+0xb8>
	{
		TempReadings_Avg = Temp_Sum / TEMP_READCOUNT;
    29ce:	80 91 be 00 	lds	r24, 0x00BE
    29d2:	90 91 bf 00 	lds	r25, 0x00BF
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	b9 01       	movw	r22, r18
    29dc:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__udivmodhi4>
    29e0:	cb 01       	movw	r24, r22
    29e2:	80 93 b6 00 	sts	0x00B6, r24
		TempReadings_Counter = 0;
    29e6:	10 92 bd 00 	sts	0x00BD, r1
		Temp_Sum = 0;
    29ea:	10 92 bf 00 	sts	0x00BF, r1
    29ee:	10 92 be 00 	sts	0x00BE, r1
	}
	else
	{
	}

}
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <Blink_SetPointTemperature_and_HeaterLED>:

void Blink_SetPointTemperature_and_HeaterLED(void)
{
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <Blink_SetPointTemperature_and_HeaterLED+0x6>
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62

	uint8 Setpoint_firstDigit=0, Setpoint_secondDigit=0;
    2a06:	1a 82       	std	Y+2, r1	; 0x02
    2a08:	19 82       	std	Y+1, r1	; 0x01

	if( LED_Blink_Flag == TRUE )
    2a0a:	80 91 b9 00 	lds	r24, 0x00B9
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	21 f4       	brne	.+8      	; 0x2a1a <Blink_SetPointTemperature_and_HeaterLED+0x1e>
	{
		Flip_LED(Heater_LED);
    2a12:	87 e1       	ldi	r24, 0x17	; 23
    2a14:	0e 94 b1 12 	call	0x2562	; 0x2562 <Flip_LED>
    2a18:	2e c0       	rjmp	.+92     	; 0x2a76 <Blink_SetPointTemperature_and_HeaterLED+0x7a>
	}
	else if( SSD_Blink_Flag == TRUE )
    2a1a:	80 91 ba 00 	lds	r24, 0x00BA
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	51 f5       	brne	.+84     	; 0x2a76 <Blink_SetPointTemperature_and_HeaterLED+0x7a>
	{
		ButtonsReleased_Counter++;
    2a22:	80 91 b7 00 	lds	r24, 0x00B7
    2a26:	8f 5f       	subi	r24, 0xFF	; 255
    2a28:	80 93 b7 00 	sts	0x00B7, r24

		if( Display_Flag == TRUE )
    2a2c:	80 91 a9 00 	lds	r24, 0x00A9
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	b1 f4       	brne	.+44     	; 0x2a60 <Blink_SetPointTemperature_and_HeaterLED+0x64>
		{
			/* SSD Display */
			Setpoint_secondDigit = Setpoint % 10;
    2a34:	80 91 c3 00 	lds	r24, 0x00C3
    2a38:	9a e0       	ldi	r25, 0x0A	; 10
    2a3a:	69 2f       	mov	r22, r25
    2a3c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__udivmodqi4>
    2a40:	89 2f       	mov	r24, r25
    2a42:	89 83       	std	Y+1, r24	; 0x01
			Setpoint_firstDigit = Setpoint / 10;
    2a44:	80 91 c3 00 	lds	r24, 0x00C3
    2a48:	9a e0       	ldi	r25, 0x0A	; 10
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__udivmodqi4>
    2a50:	8a 83       	std	Y+2, r24	; 0x02
			SSD_WriteNum(Setpoint_firstDigit, Setpoint_secondDigit);
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	69 81       	ldd	r22, Y+1	; 0x01
    2a56:	0e 94 15 10 	call	0x202a	; 0x202a <SSD_WriteNum>

			Display_Flag = FALSE;
    2a5a:	10 92 a9 00 	sts	0x00A9, r1
    2a5e:	0b c0       	rjmp	.+22     	; 0x2a76 <Blink_SetPointTemperature_and_HeaterLED+0x7a>
		}
		else if( Display_Flag == FALSE )
    2a60:	80 91 a9 00 	lds	r24, 0x00A9
    2a64:	88 23       	and	r24, r24
    2a66:	39 f4       	brne	.+14     	; 0x2a76 <Blink_SetPointTemperature_and_HeaterLED+0x7a>
		{
			SSD_WriteNum(0,0);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	60 e0       	ldi	r22, 0x00	; 0
    2a6c:	0e 94 15 10 	call	0x202a	; 0x202a <SSD_WriteNum>
			Display_Flag = TRUE;
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	80 93 a9 00 	sts	0x00A9, r24
	}
	else
	{}


}
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <Stop_WaterHeater_Operation>:

void Stop_WaterHeater_Operation(void)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
	Timer0_Stop();
    2a88:	0e 94 40 07 	call	0xe80	; 0xe80 <Timer0_Stop>
	Timer2_Stop();
    2a8c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Timer2_Stop>
	StartSSDTimer_Flag = TRUE;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	80 93 b8 00 	sts	0x00B8, r24
	StartLEDTimer_Flag = TRUE;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	80 93 a8 00 	sts	0x00A8, r24
}
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <main>:

#include "Heater Control/HeaterControl_Interface.h"
#include "State Machine/StateMachine_Interface.h"

int main(void)
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
	WaterHeater_Control_Init();
    2aaa:	0e 94 69 13 	call	0x26d2	; 0x26d2 <WaterHeater_Control_Init>
	SM_Init();
    2aae:	0e 94 12 13 	call	0x2624	; 0x2624 <SM_Init>

    while (1)
    {
		SM();
    2ab2:	0e 94 26 13 	call	0x264c	; 0x264c <SM>
    2ab6:	fd cf       	rjmp	.-6      	; 0x2ab2 <main+0x10>

00002ab8 <__udivmodqi4>:
    2ab8:	99 1b       	sub	r25, r25
    2aba:	79 e0       	ldi	r23, 0x09	; 9
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <__udivmodqi4_ep>

00002abe <__udivmodqi4_loop>:
    2abe:	99 1f       	adc	r25, r25
    2ac0:	96 17       	cp	r25, r22
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <__udivmodqi4_ep>
    2ac4:	96 1b       	sub	r25, r22

00002ac6 <__udivmodqi4_ep>:
    2ac6:	88 1f       	adc	r24, r24
    2ac8:	7a 95       	dec	r23
    2aca:	c9 f7       	brne	.-14     	; 0x2abe <__udivmodqi4_loop>
    2acc:	80 95       	com	r24
    2ace:	08 95       	ret

00002ad0 <__udivmodhi4>:
    2ad0:	aa 1b       	sub	r26, r26
    2ad2:	bb 1b       	sub	r27, r27
    2ad4:	51 e1       	ldi	r21, 0x11	; 17
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <__udivmodhi4_ep>

00002ad8 <__udivmodhi4_loop>:
    2ad8:	aa 1f       	adc	r26, r26
    2ada:	bb 1f       	adc	r27, r27
    2adc:	a6 17       	cp	r26, r22
    2ade:	b7 07       	cpc	r27, r23
    2ae0:	10 f0       	brcs	.+4      	; 0x2ae6 <__udivmodhi4_ep>
    2ae2:	a6 1b       	sub	r26, r22
    2ae4:	b7 0b       	sbc	r27, r23

00002ae6 <__udivmodhi4_ep>:
    2ae6:	88 1f       	adc	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	5a 95       	dec	r21
    2aec:	a9 f7       	brne	.-22     	; 0x2ad8 <__udivmodhi4_loop>
    2aee:	80 95       	com	r24
    2af0:	90 95       	com	r25
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	08 95       	ret

00002af8 <__prologue_saves__>:
    2af8:	2f 92       	push	r2
    2afa:	3f 92       	push	r3
    2afc:	4f 92       	push	r4
    2afe:	5f 92       	push	r5
    2b00:	6f 92       	push	r6
    2b02:	7f 92       	push	r7
    2b04:	8f 92       	push	r8
    2b06:	9f 92       	push	r9
    2b08:	af 92       	push	r10
    2b0a:	bf 92       	push	r11
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	ca 1b       	sub	r28, r26
    2b22:	db 0b       	sbc	r29, r27
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	09 94       	ijmp

00002b30 <__epilogue_restores__>:
    2b30:	2a 88       	ldd	r2, Y+18	; 0x12
    2b32:	39 88       	ldd	r3, Y+17	; 0x11
    2b34:	48 88       	ldd	r4, Y+16	; 0x10
    2b36:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b38:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b40:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b42:	b9 84       	ldd	r11, Y+9	; 0x09
    2b44:	c8 84       	ldd	r12, Y+8	; 0x08
    2b46:	df 80       	ldd	r13, Y+7	; 0x07
    2b48:	ee 80       	ldd	r14, Y+6	; 0x06
    2b4a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b4c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b4e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b50:	aa 81       	ldd	r26, Y+2	; 0x02
    2b52:	b9 81       	ldd	r27, Y+1	; 0x01
    2b54:	ce 0f       	add	r28, r30
    2b56:	d1 1d       	adc	r29, r1
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	ed 01       	movw	r28, r26
    2b64:	08 95       	ret

00002b66 <_exit>:
    2b66:	f8 94       	cli

00002b68 <__stop_program>:
    2b68:	ff cf       	rjmp	.-2      	; 0x2b68 <__stop_program>
